<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Validation on xvnpw personal blog</title><link>https://xvnpw.github.io/tags/validation/</link><description>Recent content in Validation on xvnpw personal blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Tue, 01 Aug 2023 15:59:02 +0100</lastBuildDate><atom:link href="https://xvnpw.github.io/tags/validation/index.xml" rel="self" type="application/rss+xml"/><item><title>Security Coding in Go. Input validation</title><link>https://xvnpw.github.io/posts/security-coding-in-go-input-validation/</link><pubDate>Tue, 01 Aug 2023 15:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/security-coding-in-go-input-validation/</guid><description>&lt;p>Input validation is one of most important technique in secure coding. Deep dive into it for Go language.&lt;/p>
&lt;p>From &lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html">OWASP&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Input validation is performed to ensure only properly formed data is entering the workflow in an information system.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>Data from all &lt;strong>potentially untrusted sources&lt;/strong> should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.&lt;/p></description></item></channel></rss>