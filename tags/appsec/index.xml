<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Appsec on xvnpw personal blog</title><link>https://xvnpw.github.io/tags/appsec/</link><description>Recent content in Appsec on xvnpw personal blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 04 Aug 2023 07:59:02 +0100</lastBuildDate><atom:link href="https://xvnpw.github.io/tags/appsec/index.xml" rel="self" type="application/rss+xml"/><item><title>Mitigating SSRF vulnerabilities in Go. A practical guide. Part 2</title><link>https://xvnpw.github.io/posts/mitigating_ssrf_vulnerabilities_in_go_a_practical_guide_part_2/</link><pubDate>Fri, 04 Aug 2023 07:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/mitigating_ssrf_vulnerabilities_in_go_a_practical_guide_part_2/</guid><description>&lt;p>In this final part of mitigation guide we will explore &lt;a href="https://github.com/doyensec/safeurl">doyensec/safeurl&lt;/a> library for Go.&lt;/p>
&lt;h2 id="setting-the-stage">Setting the stage&lt;/h2>
&lt;p>Reminder about our setup:&lt;/p>
&lt;figure class="image-center">&lt;img src="https://github.com/xvnpw/xvnpw.github.io/assets/17719543/28c17d0d-ff77-4674-bc27-3aba259bb8e5">
&lt;/figure>

&lt;h2 id="explot-3">Explot 3&lt;/h2>
&lt;p>We ended up &lt;a href="https://xvnpw.github.io/posts/mitigating_ssrf_vulnerabilities_in_go_a_practical_guide_part_1/#exploit-3">previous part&lt;/a> with following Public API code and exploit that works:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/debug&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">urlFromUser&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Query&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;url&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// validation because world is full of mean people :(
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">validateTargetUrl&lt;/span>(&lt;span style="color:#a6e22e">urlFromUser&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusBadRequest&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Bad url&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">resp&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">urlFromUser&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ curl -s &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> http://publicapi/debug&lt;span style="color:#ae81ff">\?&lt;/span>url&lt;span style="color:#ae81ff">\=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> http://imageapi/redirect&lt;span style="color:#ae81ff">\?&lt;/span>target&lt;span style="color:#ae81ff">\=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> http://backendapi/internal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>This is internal sensitive endpoint
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="safeurl">Safeurl&lt;/h2>
&lt;p>What is it?&lt;/p></description></item><item><title>Security Coding in Go. Input validation</title><link>https://xvnpw.github.io/posts/security-coding-in-go-input-validation/</link><pubDate>Tue, 01 Aug 2023 15:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/security-coding-in-go-input-validation/</guid><description>&lt;p>Input validation is one of most important technique in secure coding. Deep dive into it for Go language.&lt;/p>
&lt;p>From &lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html">OWASP&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Input validation is performed to ensure only properly formed data is entering the workflow in an information system.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Data from all &lt;strong>potentially untrusted sources&lt;/strong> should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.&lt;/p></description></item><item><title>Mitigating SSRF vulnerabilities in Go. A practical guide. Part 1</title><link>https://xvnpw.github.io/posts/mitigating_ssrf_vulnerabilities_in_go_a_practical_guide_part_1/</link><pubDate>Sat, 29 Jul 2023 18:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/mitigating_ssrf_vulnerabilities_in_go_a_practical_guide_part_1/</guid><description>&lt;p>Server-Side Request Forgery (SSRF) vulnerabilities have been around for a long time, and they still pose a significant threat to web applications, so much so this kind of vulnerability has been included in OWASP TOP 10. This type of attack allows an attacker to send unauthorized requests from a vulnerable application, which can lead to data leakage, server-side request smuggling, and even full-scale remote code execution.&lt;/p>
&lt;h2 id="basic-example-of-ssrf-in-go">Basic example of SSRF in Go&lt;/h2>
&lt;p>Let&amp;rsquo;s see basic code that introduce this vulnerability:&lt;/p></description></item><item><title>Threat Modeling 101</title><link>https://xvnpw.github.io/posts/threat_modeling_101/</link><pubDate>Wed, 19 Oct 2022 18:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/threat_modeling_101/</guid><description>&lt;p>What is Threat Modeling? First of all, it&amp;rsquo;s just thinking about threats. We all do it, every day ðŸ˜ƒ &amp;ldquo;How someone could break into my house?&amp;rdquo; But wait a second. How do you know that you need to protect your house in the first place? Maybe you don&amp;rsquo;t have a house, or maybe you don&amp;rsquo;t have money right now to buy deterrents. Or maybe your family thinks you are a bit paranoid? ðŸ˜• Just before doing Threat Modeling you need to start doing Risk Management, to assess what is your risk appetite and profile. More on that later.&lt;/p></description></item><item><title>Azure subscription securityÂ review</title><link>https://xvnpw.github.io/posts/azure-subscription-security-review/</link><pubDate>Mon, 01 Feb 2021 10:14:47 +0100</pubDate><guid>https://xvnpw.github.io/posts/azure-subscription-security-review/</guid><description>&lt;p>{{ template &amp;ldquo;_internal/google_analytics.html&amp;rdquo; . }}&lt;/p>
&lt;p>Lately I have come across task to perform security review of Azure subscription. It was white-box based and I had access to all terraform, Kubernetes and Docker files. I will share with you what checks are worth to do for such review.&lt;/p>
&lt;figure class="center">&lt;img src="https://user-images.githubusercontent.com/17719543/139584399-d5004590-c179-4a87-8c21-aa364f53e293.png">
&lt;/figure>

&lt;h2 id="my-methodology">My methodology&lt;/h2>
&lt;p>Number of resources to check may vary from project to project. For me best approach is to mix automated tools with manual work. If it&amp;rsquo;s possible I&amp;rsquo;m using two tools for same purpose. It makes my life easier as I don&amp;rsquo;t need to choose best tool ðŸ™‚ It&amp;rsquo;s also improving results.&lt;/p></description></item><item><title>Hacking SpEL</title><link>https://xvnpw.github.io/posts/hacking-spel/</link><pubDate>Fri, 17 Jul 2020 10:14:47 +0100</pubDate><guid>https://xvnpw.github.io/posts/hacking-spel/</guid><description>&lt;p>This story will explain how to find and exploit SpEL parser in web applications based on Java language.&lt;/p>
&lt;p>What is SpELÂ ? From Spring documentation:&lt;/p>
&lt;blockquote>
&lt;p>The Spring Expression Language (SpEL for short) is a powerful expression language that supports querying and manipulating an object graph at runtime.&lt;/p>
&lt;/blockquote>
&lt;p>Where is it usedÂ ?&lt;/p>
&lt;ol>
&lt;li>Spring Framework: Security, Data,Â â€¦&lt;/li>
&lt;li>&lt;strong>Any place developers use it by SpEL API&lt;/strong>&lt;/li>
&lt;li>For languages it can be used in Java, Kotlin, Scala, and other JVM based technologies.&lt;/li>
&lt;/ol>
&lt;p>First point is known by issues in past like: &lt;a href="https://tanzu.vmware.com/security/cve-2018-1273">CVE-2018â€“1273&lt;/a>, &lt;a href="https://tanzu.vmware.com/security/cve-2017-8046">CVE-2017â€“8046&lt;/a> or CVE-2011â€“2730. I will not talk about them, I will focus on point number two.&lt;/p></description></item></channel></rss>