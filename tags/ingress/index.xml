<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ingress on xvnpw personal blog</title><link>https://xvnpw.github.io/tags/ingress/</link><description>Recent content in Ingress on xvnpw personal blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 29 May 2022 16:59:02 +0100</lastBuildDate><atom:link href="https://xvnpw.github.io/tags/ingress/index.xml" rel="self" type="application/rss+xml"/><item><title>External Authentication bypass in ingress-nginx</title><link>https://xvnpw.github.io/posts/external_authentication_bypass_in_ingress_nginx/</link><pubDate>Sun, 29 May 2022 16:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/external_authentication_bypass_in_ingress_nginx/</guid><description>&lt;figure class="image-center">&lt;img src="https://user-images.githubusercontent.com/17719543/170878532-514c01cc-aa97-42b2-adba-f61a155d9863.png">
&lt;/figure>

&lt;p>In October 2021 I was researched &lt;a href="https://kubernetes.github.io/ingress-nginx/">ingress-nginx&lt;/a> for possibility to bypass external authentication using path traversal. It was origin story for other investigations regarding insecure usage of &lt;code>$request_uri&lt;/code> which leaded to &lt;a href="https://apisix.apache.org/blog/2021/11/23/cve-2021-43557-research-report/">Apache APISIX CVE-2021-43557&lt;/a>. I have started with report on HackerOne to Kubernetes project: &lt;a href="https://hackerone.com/reports/1357948">https://hackerone.com/reports/1357948&lt;/a>. It took long time for the team to investigate it, but in the end I got some bounty 😏 sadly report was closed as informative. They asked me to create normal &lt;a href="https://github.com/kubernetes/ingress-nginx/issues/8644">issue&lt;/a> in github as this behavior is considered as &lt;strong>not security issue&lt;/strong>. For me this is still an issue of &lt;strong>insecure design&lt;/strong>.&lt;/p></description></item><item><title>Hunting for buggy authentication/authorization services on github</title><link>https://xvnpw.github.io/posts/hunting_for_buggy_authentication_authorization_services_on_github/</link><pubDate>Sun, 28 Nov 2021 10:58:59 +0100</pubDate><guid>https://xvnpw.github.io/posts/hunting_for_buggy_authentication_authorization_services_on_github/</guid><description>&lt;figure class="image-center">&lt;img src="https://user-images.githubusercontent.com/17719543/139592951-0fafc921-437e-4bb7-b0ee-199dd72b36c3.png">
&lt;/figure>

&lt;p>To successful bypass access control using path traversal in &lt;code>$request_uri&lt;/code>, you need to have buggy authentication/authorization service. Buggy in a way it&amp;rsquo;s not normalizing url/uri that is part of access control decision. Let me find more of those on github that are relying on &lt;code>X-Original-Url&lt;/code>. There is high chance that this header is populated from &lt;code>$request_uri&lt;/code> variable and not protected in any way.&lt;/p>
&lt;h2 id="pomerium">pomerium&lt;/h2>
&lt;blockquote>
&lt;p>Pomerium is an identity-aware proxy that enables secure access to internal applications.&lt;/p></description></item><item><title>Path traversal in authorization context in Kong and F5 NGINX</title><link>https://xvnpw.github.io/posts/path_traversal_in_authorization_context_in_kong_and_f5_nginx/</link><pubDate>Thu, 25 Nov 2021 20:49:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/path_traversal_in_authorization_context_in_kong_and_f5_nginx/</guid><description>&lt;figure class="image-center">&lt;img src="https://user-images.githubusercontent.com/17719543/139592951-0fafc921-437e-4bb7-b0ee-199dd72b36c3.png">
&lt;/figure>

&lt;p>In this part I will research another ingress controller based on &lt;strong>nginx&lt;/strong>: 🦍 &lt;a href="https://konghq.com/solutions/kubernetes-ingress/">kong&lt;/a>. At the end of article I will mention in short &lt;a href="https://www.nginx.com/products/nginx-ingress-controller">F5 NGINX Ingress Controller&lt;/a>.&lt;/p>
&lt;p>In kong there is no explicit feature called external authentication, but developers gave possibility to create it using plugins.&lt;/p>
&lt;p>Here are some links describing this process:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://konghq.com/blog/custom-authentication-and-authorization-framework-with-kong/">Custom Authentication and Authorization Framework with Kong&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/aunkenlabs/kong-external-auth">aunkenlabs/kong-external-auth&lt;/a> - repository with PoC of external-auth. It&amp;rsquo;s old and cannot be run as it with kong 2.6, which is latest at time of writing.&lt;/li>
&lt;/ul>
&lt;p>During analysis I have found two possible exploitation paths:&lt;/p></description></item><item><title>Path traversal in authorization context in Emissary</title><link>https://xvnpw.github.io/posts/path_traversal_in_authorization_context_in_emissary/</link><pubDate>Wed, 24 Nov 2021 19:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/path_traversal_in_authorization_context_in_emissary/</guid><description>&lt;figure class="image-center">&lt;img src="https://user-images.githubusercontent.com/17719543/139592951-0fafc921-437e-4bb7-b0ee-199dd72b36c3.png">
&lt;/figure>

&lt;p>After checking Apache APISIX and Traefik, for path traversal in authZ context, now I will research Emissary ingress.&lt;/p>
&lt;p>In Emissary there is feature called &lt;a href="https://www.getambassador.io/docs/emissary/latest/howtos/basic-auth/">Basic authentication&lt;/a>, which is very similar to forward authentication discussed in Traefik.&lt;/p>
&lt;blockquote>
&lt;p>Emissary-ingress can authenticate incoming requests before routing them to a backing service.&lt;/p>&lt;/blockquote>
&lt;p>&lt;strong>I can already tell you that Emissary is secure and you cannot bypass using path traversal&lt;/strong>. What is even better, it&amp;rsquo;s (and envoy) aware of this kind of security concern. There is full description in documentation. I encourage you to read it:&lt;/p></description></item><item><title>Path traversal in authorization context in Traefik and HAProxy</title><link>https://xvnpw.github.io/posts/path_traversal_in_authorization_context_in_traefik_and_haproxy/</link><pubDate>Tue, 23 Nov 2021 22:38:58 +0100</pubDate><guid>https://xvnpw.github.io/posts/path_traversal_in_authorization_context_in_traefik_and_haproxy/</guid><description>&lt;figure class="image-center">&lt;img src="https://user-images.githubusercontent.com/17719543/139592951-0fafc921-437e-4bb7-b0ee-199dd72b36c3.png">
&lt;/figure>

&lt;p>In my previous post about &lt;a href="https://xvnpw.github.io/posts/cve_2021_43557_apache_apisix_path_traversal_in_request_uri_variable/">Apache APISIX&lt;/a> I have found path traversal in uri-blocker plugin. In this text I will focus on yet another ingress controller which is &lt;a href="https://doc.traefik.io/traefik/providers/kubernetes-ingress/">Traefik&lt;/a>. It has feature called forward auth. At the end I will mention HAProxy ingress controller.&lt;/p>
&lt;p>From &lt;a href="https://doc.traefik.io/traefik/v2.0/middlewares/forwardauth/">docs&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>The ForwardAuth middleware delegate the authentication to an external service. If the service response code is 2XX, access is granted and the original request is performed. Otherwise, the response from the authentication server is returned.&lt;/p></description></item><item><title>CVE-2021-43557: Apache APISIX: Path traversal in request_uri variable</title><link>https://xvnpw.github.io/posts/cve_2021_43557_apache_apisix_path_traversal_in_request_uri_variable/</link><pubDate>Mon, 22 Nov 2021 20:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/cve_2021_43557_apache_apisix_path_traversal_in_request_uri_variable/</guid><description>&lt;figure class="image-center">&lt;img src="https://user-images.githubusercontent.com/17719543/139592951-0fafc921-437e-4bb7-b0ee-199dd72b36c3.png">
&lt;/figure>

&lt;p>In this article I will present my research on insecure usage of &lt;code>$request_uri&lt;/code> variable in &lt;a href="https://github.com/apache/apisix-ingress-controller/">Apache APISIX&lt;/a> ingress controller. My work end up in submit of security vulnerability, which was positively confirmed and got CVE-2021-43557. At the end of article I will mention in short &lt;a href="https://github.com/zalando/skipper">Skipper&lt;/a> which I tested for same problem.&lt;/p>
&lt;p>What is APISIX ? From official website:&lt;/p>
&lt;blockquote>
&lt;p>Apache APISIX is a dynamic, real-time, high-performance API gateway.
APISIX provides rich traffic management features such as load balancing, dynamic upstream, canary release, circuit breaking, authentication, observability, and more.&lt;/p></description></item></channel></rss>