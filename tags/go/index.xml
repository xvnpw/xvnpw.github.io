<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on xvnpw personal blog</title><link>https://xvnpw.github.io/tags/go/</link><description>Recent content in go on xvnpw personal blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 04 Aug 2023 07:59:02 +0100</lastBuildDate><atom:link href="https://xvnpw.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Mitigating SSRF vulnerabilities in Go. A practical guide. Part 2</title><link>https://xvnpw.github.io/posts/mitigating_ssrf_vulnerabilities_in_go_a_practical_guide_part_2/</link><pubDate>Fri, 04 Aug 2023 07:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/mitigating_ssrf_vulnerabilities_in_go_a_practical_guide_part_2/</guid><description>In this final part of mitigation guide we will explore doyensec/safeurl library for Go.
Setting the stage Reminder about our setup:
Explot 3 We have following Public API code and exploit that works:
router.GET(&amp;#34;/debug&amp;#34;, func(context *gin.Context) { urlFromUser := context.Query(&amp;#34;url&amp;#34;) // validation because world is full of mean people :( if !validateTargetUrl(urlFromUser) { context.String(http.StatusBadRequest, &amp;#34;Bad url&amp;#34;) return } resp, err := http.Get(urlFromUser) $ curl -s \ http://publicapi/debug\?url\= http://imageapi/redirect\?target\= http://backendapi/internal This is internal sensitive endpoint Safeurl What is it?</description></item><item><title>Security Coding in Go. Input validation</title><link>https://xvnpw.github.io/posts/security-coding-in-go-input-validation/</link><pubDate>Tue, 01 Aug 2023 15:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/security-coding-in-go-input-validation/</guid><description>Input validation is one of most important technique in secure coding. Deep dive into it for Go language.
From OWASP:
Input validation is performed to ensure only properly formed data is entering the workflow in an information system.
Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.
Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</description></item><item><title>Mitigating SSRF vulnerabilities in Go. A practical guide. Part 1</title><link>https://xvnpw.github.io/posts/mitigating_ssrf_vulnerabilities_in_go_a_practical_guide_part_1/</link><pubDate>Sat, 29 Jul 2023 18:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/mitigating_ssrf_vulnerabilities_in_go_a_practical_guide_part_1/</guid><description>Server-Side Request Forgery (SSRF) vulnerabilities have been around for a long time, and they still pose a significant threat to web applications, so much so this kind of vulnerability has been included in OWASP TOP 10. This type of attack allows an attacker to send unauthorized requests from a vulnerable application, which can lead to data leakage, server-side request smuggling, and even full-scale remote code execution.
Basic example of SSRF in Go Let&amp;rsquo;s see basic code that introduce this vulnerability:</description></item></channel></rss>