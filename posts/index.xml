<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on xvnpw personal blog</title><link>https://xvnpw.github.io/posts/</link><description>Recent content in Posts on xvnpw personal blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 23 Nov 2021 22:38:58 +0100</lastBuildDate><atom:link href="https://xvnpw.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Path traversal in authorization context in Traefik and HAProxy</title><link>https://xvnpw.github.io/posts/path_traversal_in_authorization_context_in_traefik_and_haproxy/</link><pubDate>Tue, 23 Nov 2021 22:38:58 +0100</pubDate><guid>https://xvnpw.github.io/posts/path_traversal_in_authorization_context_in_traefik_and_haproxy/</guid><description>In my previous post about Apache APISIX I have found path traversal in uri-blocker plugin. In this text I will focus on yet another ingress controller which is Traefik. It has feature called forward auth. At the end I will mention HAProxy ingress controller.
From docs:
The ForwardAuth middleware delegate the authentication to an external service. If the service response code is 2XX, access is granted and the original request is performed.</description></item><item><title>CVE-2021-43557: Apache APISIX: Path traversal in request_uri variable</title><link>https://xvnpw.github.io/posts/cve_2021_43557_apache_apisix_path_traversal_in_request_uri_variable/</link><pubDate>Mon, 22 Nov 2021 20:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/cve_2021_43557_apache_apisix_path_traversal_in_request_uri_variable/</guid><description>In this article I will present my research on insecure usage of $request_uri variable in Apache APISIX ingress controller. My work end up in submit of security vulnerability, which was positively confirmed and got CVE-2021-43557. At the end of article I will mention in short Skipper which I tested for same problem.
What is APISIX ? From official website:
Apache APISIX is a dynamic, real-time, high-performance API gateway. APISIX provides rich traffic management features such as load balancing, dynamic upstream, canary release, circuit breaking, authentication, observability, and more.</description></item><item><title>Azure subscription security review</title><link>https://xvnpw.github.io/posts/azure-subscription-security-review/</link><pubDate>Mon, 01 Feb 2021 10:14:47 +0100</pubDate><guid>https://xvnpw.github.io/posts/azure-subscription-security-review/</guid><description>Lately I have come across task to perform security review of Azure subscription. It was white-box based and I had access to all terraform, Kubernetes and Docker files. I will share with you what checks are worth to do for such review.
My methodology Number of resources to check may vary from project to project. For me best approach is to mix automated tools with manual work. If it&amp;rsquo;s possible I&amp;rsquo;m using two tools for same purpose.</description></item><item><title>Hacking SpEL</title><link>https://xvnpw.github.io/posts/hacking-spel/</link><pubDate>Fri, 17 Jul 2020 10:14:47 +0100</pubDate><guid>https://xvnpw.github.io/posts/hacking-spel/</guid><description>This story will explain how to find and exploit SpEL parser in web applications based on Java language.
What is SpEL ? From Spring documentation:
The Spring Expression Language (SpEL for short) is a powerful expression language that supports querying and manipulating an object graph at runtime.
Where is it used ?
Spring Framework: Security, Data, … Any place developers use it by SpEL API For languages it can be used in Java, Kotlin, Scala, and other JVM based technologies.</description></item><item><title>From . in regex to SSRF - part 3</title><link>https://xvnpw.github.io/posts/from-dot-in-regex-to-ssrf-part-3/</link><pubDate>Tue, 07 Jul 2020 10:14:47 +0100</pubDate><guid>https://xvnpw.github.io/posts/from-dot-in-regex-to-ssrf-part-3/</guid><description>This is last part of my stories about exploiting service with SSRF bug. Part 1 is available here, and part 2 here.
This part is focused on abusing Node.js and node-fetch library. I will try to &amp;ldquo;talk&amp;rdquo; with Redis service using CRLF injection in http parser.
For convenience Redis service will be simulated by nc -vvlp 6379.
Test environment from my Kali 2020.1b:
Node.js version 10.19.0 node-fetch version 2.6.0 CRLF Injection Lets start with PayloadsAllTheThings.</description></item><item><title>From . in regex to SSRF - part 2</title><link>https://xvnpw.github.io/posts/from-dot-in-regex-to-ssrf-part-2/</link><pubDate>Tue, 14 Jan 2020 10:14:47 +0100</pubDate><guid>https://xvnpw.github.io/posts/from-dot-in-regex-to-ssrf-part-2/</guid><description>In this story I will continue my journey to exploit Server Side Request Forgery (SSRF). Part 1 is available here.
What is state of the game up to now? I have found service that is vulnerable to SSRF by executing the REST call and by passing domain name check:
https://api.example.org/image-converter/https://www-example.org
I have registered domain name: www-example.org and add for it CNAME record to my EC2 server.
But wait a second. This is not yet &amp;ldquo;SSRF&amp;rdquo;.</description></item><item><title>From . in regex to SSRF - part 1</title><link>https://xvnpw.github.io/posts/from-dot-in-regex-to-ssrf-part-1/</link><pubDate>Sun, 05 Jan 2020 10:14:47 +0100</pubDate><guid>https://xvnpw.github.io/posts/from-dot-in-regex-to-ssrf-part-1/</guid><description>In test of one application I have encountered bug in regex that leaded to Server Side Request Forgery (SSRF). Way of finding it was huge fun and excitement. It was also my first bug on production system ever.
During a recon I have found service called image-converter. It was definitely interesting, but not straight forward to exploit. I had no example of usage it and on simple GET request I was just getting:</description></item></channel></rss>