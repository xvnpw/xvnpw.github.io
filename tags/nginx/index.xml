<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>nginx on xvnpw personal blog</title><link>https://xvnpw.github.io/tags/nginx/</link><description>Recent content in nginx on xvnpw personal blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 28 Nov 2021 10:58:59 +0100</lastBuildDate><atom:link href="https://xvnpw.github.io/tags/nginx/index.xml" rel="self" type="application/rss+xml"/><item><title>Hunting for buggy authentication/authorization services on github</title><link>https://xvnpw.github.io/posts/hunting_for_buggy_authentication_authorization_services_on_github/</link><pubDate>Sun, 28 Nov 2021 10:58:59 +0100</pubDate><guid>https://xvnpw.github.io/posts/hunting_for_buggy_authentication_authorization_services_on_github/</guid><description>To successful bypass access control using path traversal in $request_uri, you need to have buggy authentication/authorization service. Buggy in a way it&amp;rsquo;s not normalizing url/uri that is part of access control decision. Let me find more of those on github that are relying on X-Original-Url. There is high chance that this header is populated from $request_uri variable and not protected in any way.
pomerium Pomerium is an identity-aware proxy that enables secure access to internal applications.</description></item><item><title>Bug bounty tips for nginx $request_uri path traversal bypass</title><link>https://xvnpw.github.io/posts/bug_bounty_tips_for_nginx_request_uri_path_traversal_bypass/</link><pubDate>Sat, 27 Nov 2021 22:59:05 +0100</pubDate><guid>https://xvnpw.github.io/posts/bug_bounty_tips_for_nginx_request_uri_path_traversal_bypass/</guid><description>In this article, I will extend topic by bug bounty tips for weaknesses in authentication/authorization implementation in relation to nginx&amp;rsquo;s $request_uri variable.
APIs This vulnerability is for APIs. Best scenario are microservice deployed to Kubernetes and exposed by ingress controller.
Using paths API that you are playing with, need to use paths to address services, e.g.:
OK! https://api.example.com/user-service https://api.example.com/customer-service ... NOT OK! https://user.example.com/ https://customer.example.com/ First set of URLs is good for exploitation, as you can try sending request with https://api.</description></item></channel></rss>