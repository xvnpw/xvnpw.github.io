<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nginx on xvnpw personal blog</title><link>https://xvnpw.github.io/tags/nginx/</link><description>Recent content in Nginx on xvnpw personal blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 29 May 2022 16:59:02 +0100</lastBuildDate><atom:link href="https://xvnpw.github.io/tags/nginx/index.xml" rel="self" type="application/rss+xml"/><item><title>External Authentication bypass in ingress-nginx</title><link>https://xvnpw.github.io/posts/external_authentication_bypass_in_ingress_nginx/</link><pubDate>Sun, 29 May 2022 16:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/external_authentication_bypass_in_ingress_nginx/</guid><description>&lt;figure class="image-center">&lt;img src="https://user-images.githubusercontent.com/17719543/170878532-514c01cc-aa97-42b2-adba-f61a155d9863.png">
&lt;/figure>

&lt;p>In October 2021 I was researched &lt;a href="https://kubernetes.github.io/ingress-nginx/">ingress-nginx&lt;/a> for possibility to bypass external authentication using path traversal. It was origin story for other investigations regarding insecure usage of &lt;code>$request_uri&lt;/code> which leaded to &lt;a href="https://apisix.apache.org/blog/2021/11/23/cve-2021-43557-research-report/">Apache APISIX CVE-2021-43557&lt;/a>. I have started with report on HackerOne to Kubernetes project: &lt;a href="https://hackerone.com/reports/1357948">https://hackerone.com/reports/1357948&lt;/a>. It took long time for the team to investigate it, but in the end I got some bounty 😏 sadly report was closed as informative. They asked me to create normal &lt;a href="https://github.com/kubernetes/ingress-nginx/issues/8644">issue&lt;/a> in github as this behavior is considered as &lt;strong>not security issue&lt;/strong>. For me this is still an issue of &lt;strong>insecure design&lt;/strong>.&lt;/p></description></item><item><title>Hunting for buggy authentication/authorization services on github</title><link>https://xvnpw.github.io/posts/hunting_for_buggy_authentication_authorization_services_on_github/</link><pubDate>Sun, 28 Nov 2021 10:58:59 +0100</pubDate><guid>https://xvnpw.github.io/posts/hunting_for_buggy_authentication_authorization_services_on_github/</guid><description>&lt;figure class="image-center">&lt;img src="https://user-images.githubusercontent.com/17719543/139592951-0fafc921-437e-4bb7-b0ee-199dd72b36c3.png">
&lt;/figure>

&lt;p>To successful bypass access control using path traversal in &lt;code>$request_uri&lt;/code>, you need to have buggy authentication/authorization service. Buggy in a way it&amp;rsquo;s not normalizing url/uri that is part of access control decision. Let me find more of those on github that are relying on &lt;code>X-Original-Url&lt;/code>. There is high chance that this header is populated from &lt;code>$request_uri&lt;/code> variable and not protected in any way.&lt;/p>
&lt;h2 id="pomerium">pomerium&lt;/h2>
&lt;blockquote>
&lt;p>Pomerium is an identity-aware proxy that enables secure access to internal applications.&lt;/p></description></item><item><title>Bug bounty tips for nginx $request_uri path traversal bypass</title><link>https://xvnpw.github.io/posts/bug_bounty_tips_for_nginx_request_uri_path_traversal_bypass/</link><pubDate>Sat, 27 Nov 2021 22:59:05 +0100</pubDate><guid>https://xvnpw.github.io/posts/bug_bounty_tips_for_nginx_request_uri_path_traversal_bypass/</guid><description>&lt;figure class="image-center">&lt;img src="https://user-images.githubusercontent.com/17719543/139592951-0fafc921-437e-4bb7-b0ee-199dd72b36c3.png">
&lt;/figure>

&lt;p>In this article, I will extend topic by bug bounty tips for weaknesses in authentication/authorization implementation in relation to nginx&amp;rsquo;s &lt;code>$request_uri&lt;/code> variable.&lt;/p>
&lt;h2 id="apis">APIs&lt;/h2>
&lt;p>This vulnerability is for APIs. Best scenario are &lt;strong>microservice&lt;/strong> deployed to Kubernetes and exposed by ingress controller.&lt;/p>
&lt;h2 id="using-paths">Using paths&lt;/h2>
&lt;p>API that you are playing with, need to use paths to address services, e.g.:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>OK!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>https://api.example.com/user-service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>https://api.example.com/customer-service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NOT OK!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>https://user.example.com/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>https://customer.example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>First set of URLs is good for exploitation, as you can try sending request with &lt;code>https://api.example.com/user-service/..%2F/customer-service/endpoint1&lt;/code>&lt;/p></description></item></channel></rss>