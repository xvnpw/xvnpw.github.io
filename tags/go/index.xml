<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on xvnpw personal blog</title><link>https://xvnpw.github.io/tags/go/</link><description>Recent content in go on xvnpw personal blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 29 Jul 2023 18:59:02 +0100</lastBuildDate><atom:link href="https://xvnpw.github.io/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Mitigating SSRF vulnerabilities in Go. A practical guide. Part 1</title><link>https://xvnpw.github.io/posts/mitigating_ssrf_vulnerabilities_in_go_a_practical_guide_part_1/</link><pubDate>Sat, 29 Jul 2023 18:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/mitigating_ssrf_vulnerabilities_in_go_a_practical_guide_part_1/</guid><description>Server-Side Request Forgery (SSRF) vulnerabilities have been around for a long time, and they still pose a significant threat to web applications, so much so this kind of vulnerability has been included in OWASP TOP 10. This type of attack allows an attacker to send unauthorized requests from a vulnerable application, which can lead to data leakage, server-side request smuggling, and even full-scale remote code execution.
Basic example of SSRF in Go Let&amp;rsquo;s see basic code that introduce this vulnerability:</description></item></channel></rss>