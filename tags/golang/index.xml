<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on xvnpw personal blog</title><link>https://xvnpw.github.io/tags/golang/</link><description>Recent content in golang on xvnpw personal blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 01 Aug 2023 15:59:02 +0100</lastBuildDate><atom:link href="https://xvnpw.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Security Coding in Go. Input Validation</title><link>https://xvnpw.github.io/posts/security-coding-in-go-input-validation/</link><pubDate>Tue, 01 Aug 2023 15:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/security-coding-in-go-input-validation/</guid><description>Input validation is one of most important technique in secure coding. Deep dive into it for Go language.
From OWASP:
Input validation is performed to ensure only properly formed data is entering the workflow in an information system.
Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.
Data from all potentially untrusted sources should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.</description></item></channel></rss>