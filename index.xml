<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>xvnpw personal blog</title><link>https://xvnpw.github.io/</link><description>Recent content on xvnpw personal blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 30 Oct 2024 11:59:02 +0100</lastBuildDate><atom:link href="https://xvnpw.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Create design documents with Fabric</title><link>https://xvnpw.github.io/posts/fabric_design_documents/</link><pubDate>Wed, 30 Oct 2024 11:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/fabric_design_documents/</guid><description>&lt;p>I encountered a challenge in creating high-quality design documents for my threat modeling research. About a year and a half ago, I created &lt;a href="https://github.com/xvnpw/ai-nutrition-pro-design-gpt3.5/blob/main/ARCHITECTURE.md">AI Nutrition-Pro&lt;/a> architecture and have been using it since then. What if it&amp;rsquo;s already in LLMs&amp;rsquo; training data? Testing threat modeling capabilities could give me false results.&lt;/p>
&lt;p>I developed several prompts to assist with the challenging task of creating design documents. I implemented these as &lt;a href="https://github.com/danielmiessler/fabric">Fabric&lt;/a> patterns for everyone&amp;rsquo;s benefit. If you&amp;rsquo;re unfamiliar with Fabric - it&amp;rsquo;s an excellent CLI tool created by &lt;a href="https://danielmiessler.com">Daniel Miessler&lt;/a>.&lt;/p></description></item><item><title>Threat Modelling with Fabric Framework</title><link>https://xvnpw.github.io/posts/threat_modelling_with_fabric_framework/</link><pubDate>Mon, 03 Jun 2024 16:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/threat_modelling_with_fabric_framework/</guid><description>&lt;p>&lt;a href="https://github.com/danielmiessler/fabric">Fabric&lt;/a> is a framework that puts AI at your fingertips. Instead of diving into chat interfaces (e.g., ChatGPT) or writing custom programs that consume APIs, you can create prompts as markdown text and receive output in markdown. Fabric also maintains a database of prompts called &lt;a href="https://github.com/danielmiessler/fabric/tree/main/patterns">patterns&lt;/a>.&lt;/p>
&lt;figure class="image-center">&lt;img src="https://github.com/xvnpw/xvnpw.github.io/assets/17719543/4fe91d36-3736-4cbf-9835-edfa3943116e" width="300">
&lt;/figure>

&lt;p>With the new pattern &lt;a href="https://github.com/danielmiessler/fabric/blob/main/patterns/create_stride_threat_model/system.md">create_stride_threat_model&lt;/a>, you can easily create threat models. Let&amp;rsquo;s dive deeper into how to use this new pattern and evaluate the quality of the results.&lt;/p></description></item><item><title>Leveraging LLMs for Threat Modeling - Claude 3 Opus vs GPT-4</title><link>https://xvnpw.github.io/posts/leveraging-llms-for-threat-modelling-claude-3-vs-gpt-4/</link><pubDate>Wed, 20 Mar 2024 14:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/leveraging-llms-for-threat-modelling-claude-3-vs-gpt-4/</guid><description>&lt;p>&lt;a href="https://www.anthropic.com/news/claude-3-family">Claude 3 Opus&lt;/a> is the latest and most powerful model from Anthropic. Is it able to overcome GPT-4?&lt;/p>
&lt;figure class="image-center">&lt;img src="https://github.com/xvnpw/xvnpw.github.io/assets/17719543/3305cef0-c07d-4239-8fd9-c6e9e14146e7">
&lt;/figure>

&lt;h2 id="revisiting-the-experiment">Revisiting the Experiment&lt;/h2>
&lt;p>If you wish to understand more about the experiment structure, you can refer to my &lt;a href="https://xvnpw.github.io/posts/leveraging-llms-for-threat-modelling-gpt-3.5/">previous post&lt;/a>. But here&amp;rsquo;s a quick recap:&lt;/p>
&lt;p>I used markdown files describing a fictional project, &lt;strong>AI Nutrition-Pro&lt;/strong>, with input:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/xvnpw/ai-nutrition-pro-design-claude3-opus/blob/main/PROJECT.md">PROJECT.md&lt;/a> - high level project description&lt;/li>
&lt;li>&lt;a href="https://github.com/xvnpw/ai-nutrition-pro-design-claude3-opus/blob/main/ARCHITECTURE.md">ARCHITECTURE.md&lt;/a> - architecture description&lt;/li>
&lt;li>&lt;a href="https://github.com/xvnpw/ai-nutrition-pro-design-claude3-opus/blob/main/user-stories/0001_STORE_DIET_INTRODUCTIONS.md">0001_STORE_DIET_INTRODUCTIONS.md&lt;/a> - user story&lt;/li>
&lt;/ul>
&lt;p>I tasked the AI models with four types of analysis: high-level security design review, threat modeling, security-related acceptance criteria and review of architecture:&lt;/p></description></item><item><title>Reviewing Your Architecture Using LLMs</title><link>https://xvnpw.github.io/posts/review_your_architecture_using_llms/</link><pubDate>Wed, 25 Oct 2023 08:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/review_your_architecture_using_llms/</guid><description>&lt;p>Recently, I&amp;rsquo;ve discussed &lt;a href="https://xvnpw.github.io/posts/leveraging-llms-for-threat-modelling-gpt-3.5-vs-claude2-vs-gpt-4/">utilizing LLMs for threat modeling&lt;/a>. Building on that, I&amp;rsquo;ve incorporated a new feature in my &lt;a href="https://github.com/xvnpw/ai-threat-modeling-action">ai-threat-modeling-action&lt;/a> on GitHub. It now allows you to review your project&amp;rsquo;s architectural description using LLMs. Let&amp;rsquo;s delve deeper 🤿!&lt;/p>
&lt;h2 id="revisiting-the-experiment">Revisiting the Experiment&lt;/h2>
&lt;p>For a detailed understanding of the experiment&amp;rsquo;s structure, you can revisit my &lt;a href="https://xvnpw.github.io/posts/leveraging-llms-for-threat-modelling-gpt-3.5/">previous post&lt;/a>. However, here&amp;rsquo;s a brief summary:&lt;/p>
&lt;p>I utilized markdown files, which described a fictional project named &lt;strong>AI Nutrition-Pro&lt;/strong>, as input:&lt;/p></description></item><item><title>Leveraging LLMs for Threat Modeling - GPT-3.5 vs Claude 2 vs GPT-4</title><link>https://xvnpw.github.io/posts/leveraging-llms-for-threat-modelling-gpt-3.5-vs-claude2-vs-gpt-4/</link><pubDate>Sun, 03 Sep 2023 08:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/leveraging-llms-for-threat-modelling-gpt-3.5-vs-claude2-vs-gpt-4/</guid><description>&lt;p>In a bid to uncover which AI model is best at threat modeling, I put GPT-3.5, Claude 2, and GPT-4 to the test. Let&amp;rsquo;s see how they performed.&lt;/p>
&lt;figure class="image-center">&lt;img src="https://github.com/xvnpw/xvnpw.github.io/assets/17719543/bf036c66-1d66-4468-8dcd-426d6e0f40f6">
&lt;/figure>

&lt;p>&lt;a href="https://twitter.com/emollick">Ethan Mollick&lt;/a>, a professor at The Wharton School, once said something that perfectly captures my experience with these AI models. It feels as if they&amp;rsquo;re striving to answer questions in the simplest way possible 😏 However, you can get around this by asking for detailed explanations or step-by-step thinking.&lt;/p></description></item><item><title>Leveraging LLMs for Threat Modeling - GPT-3.5</title><link>https://xvnpw.github.io/posts/leveraging-llms-for-threat-modelling-gpt-3.5/</link><pubDate>Thu, 17 Aug 2023 18:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/leveraging-llms-for-threat-modelling-gpt-3.5/</guid><description>&lt;p>In this article, I delve into the &lt;a href="https://github.com/xvnpw/ai-nutrition-pro-design-gpt3.5">AI Nutrition-Pro experiment&lt;/a>, a research project exploring the potential of LLMs in enhancing security practices during the design phase of DevSecOps: &lt;strong>threat modeling&lt;/strong> and &lt;strong>security review&lt;/strong>.&lt;/p>
&lt;h2 id="devsecops-a-brief-overview">DevSecOps: A Brief Overview&lt;/h2>
&lt;p>DevSecOps merges the principles of development, security, and operations to create a culture of shared responsibility for software security. The three main goals of DevSecOps are:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Shift Left Security:&lt;/strong> Identifying and addressing security vulnerabilities as early as possible in the software development lifecycle.&lt;/li>
&lt;li>&lt;strong>Developer-Centric:&lt;/strong> Integrating security practices seamlessly into the developer&amp;rsquo;s ecosystem, including Integrated Development Environments (IDEs), code hosting platforms, and pull requests.&lt;/li>
&lt;li>&lt;strong>Fast Feedback and Guidance:&lt;/strong> Providing developers with rapid feedback on security issues and guidance on secure coding practices.&lt;/li>
&lt;/ul>
&lt;p>While security tools like &lt;a href="https://semgrep.dev/blog/2023/using-ai-to-write-secure-code-with-semgrep">semgrep&lt;/a> can already use LLMs in the coding phase, the AI Nutrition-Pro experiment seeks to explore the benefits of LLMs during the design phase, particularly in security design reviews and threat modeling.&lt;/p></description></item><item><title>Mitigating SSRF vulnerabilities in Go. A practical guide. Part 2</title><link>https://xvnpw.github.io/posts/mitigating_ssrf_vulnerabilities_in_go_a_practical_guide_part_2/</link><pubDate>Fri, 04 Aug 2023 07:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/mitigating_ssrf_vulnerabilities_in_go_a_practical_guide_part_2/</guid><description>&lt;p>In this final part of mitigation guide we will explore &lt;a href="https://github.com/doyensec/safeurl">doyensec/safeurl&lt;/a> library for Go.&lt;/p>
&lt;h2 id="setting-the-stage">Setting the stage&lt;/h2>
&lt;p>Reminder about our setup:&lt;/p>
&lt;figure class="image-center">&lt;img src="https://github.com/xvnpw/xvnpw.github.io/assets/17719543/28c17d0d-ff77-4674-bc27-3aba259bb8e5">
&lt;/figure>

&lt;h2 id="explot-3">Explot 3&lt;/h2>
&lt;p>We ended up &lt;a href="https://xvnpw.github.io/posts/mitigating_ssrf_vulnerabilities_in_go_a_practical_guide_part_1/#exploit-3">previous part&lt;/a> with following Public API code and exploit that works:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">router&lt;/span>.&lt;span style="color:#a6e22e">GET&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;/debug&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">context&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">gin&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">urlFromUser&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Query&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;url&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// validation because world is full of mean people :(
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">validateTargetUrl&lt;/span>(&lt;span style="color:#a6e22e">urlFromUser&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusBadRequest&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;Bad url&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">resp&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">urlFromUser&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>$ curl -s &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> http://publicapi/debug&lt;span style="color:#ae81ff">\?&lt;/span>url&lt;span style="color:#ae81ff">\=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> http://imageapi/redirect&lt;span style="color:#ae81ff">\?&lt;/span>target&lt;span style="color:#ae81ff">\=&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> http://backendapi/internal
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>This is internal sensitive endpoint
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="safeurl">Safeurl&lt;/h2>
&lt;p>What is it?&lt;/p></description></item><item><title>Security Coding in Go. Input validation</title><link>https://xvnpw.github.io/posts/security-coding-in-go-input-validation/</link><pubDate>Tue, 01 Aug 2023 15:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/security-coding-in-go-input-validation/</guid><description>&lt;p>Input validation is one of most important technique in secure coding. Deep dive into it for Go language.&lt;/p>
&lt;p>From &lt;a href="https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html">OWASP&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>Input validation is performed to ensure only properly formed data is entering the workflow in an information system.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Input validation should happen as early as possible in the data flow, preferably as soon as the data is received from the external party.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>Data from all &lt;strong>potentially untrusted sources&lt;/strong> should be subject to input validation, including not only Internet-facing web clients but also backend feeds over extranets, from suppliers, partners, vendors or regulators, each of which may be compromised on their own and start sending malformed data.&lt;/p></description></item><item><title>Mitigating SSRF vulnerabilities in Go. A practical guide. Part 1</title><link>https://xvnpw.github.io/posts/mitigating_ssrf_vulnerabilities_in_go_a_practical_guide_part_1/</link><pubDate>Sat, 29 Jul 2023 18:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/mitigating_ssrf_vulnerabilities_in_go_a_practical_guide_part_1/</guid><description>&lt;p>Server-Side Request Forgery (SSRF) vulnerabilities have been around for a long time, and they still pose a significant threat to web applications, so much so this kind of vulnerability has been included in OWASP TOP 10. This type of attack allows an attacker to send unauthorized requests from a vulnerable application, which can lead to data leakage, server-side request smuggling, and even full-scale remote code execution.&lt;/p>
&lt;h2 id="basic-example-of-ssrf-in-go">Basic example of SSRF in Go&lt;/h2>
&lt;p>Let&amp;rsquo;s see basic code that introduce this vulnerability:&lt;/p></description></item><item><title>Threat Modeling 101</title><link>https://xvnpw.github.io/posts/threat_modeling_101/</link><pubDate>Wed, 19 Oct 2022 18:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/threat_modeling_101/</guid><description>&lt;p>What is Threat Modeling? First of all, it&amp;rsquo;s just thinking about threats. We all do it, every day 😃 &amp;ldquo;How someone could break into my house?&amp;rdquo; But wait a second. How do you know that you need to protect your house in the first place? Maybe you don&amp;rsquo;t have a house, or maybe you don&amp;rsquo;t have money right now to buy deterrents. Or maybe your family thinks you are a bit paranoid? 😕 Just before doing Threat Modeling you need to start doing Risk Management, to assess what is your risk appetite and profile. More on that later.&lt;/p></description></item><item><title>External Authentication bypass in ingress-nginx</title><link>https://xvnpw.github.io/posts/external_authentication_bypass_in_ingress_nginx/</link><pubDate>Sun, 29 May 2022 16:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/external_authentication_bypass_in_ingress_nginx/</guid><description>&lt;figure class="image-center">&lt;img src="https://user-images.githubusercontent.com/17719543/170878532-514c01cc-aa97-42b2-adba-f61a155d9863.png">
&lt;/figure>

&lt;p>In October 2021 I was researched &lt;a href="https://kubernetes.github.io/ingress-nginx/">ingress-nginx&lt;/a> for possibility to bypass external authentication using path traversal. It was origin story for other investigations regarding insecure usage of &lt;code>$request_uri&lt;/code> which leaded to &lt;a href="https://apisix.apache.org/blog/2021/11/23/cve-2021-43557-research-report/">Apache APISIX CVE-2021-43557&lt;/a>. I have started with report on HackerOne to Kubernetes project: &lt;a href="https://hackerone.com/reports/1357948">https://hackerone.com/reports/1357948&lt;/a>. It took long time for the team to investigate it, but in the end I got some bounty 😏 sadly report was closed as informative. They asked me to create normal &lt;a href="https://github.com/kubernetes/ingress-nginx/issues/8644">issue&lt;/a> in github as this behavior is considered as &lt;strong>not security issue&lt;/strong>. For me this is still an issue of &lt;strong>insecure design&lt;/strong>.&lt;/p></description></item><item><title>Hunting for buggy authentication/authorization services on github</title><link>https://xvnpw.github.io/posts/hunting_for_buggy_authentication_authorization_services_on_github/</link><pubDate>Sun, 28 Nov 2021 10:58:59 +0100</pubDate><guid>https://xvnpw.github.io/posts/hunting_for_buggy_authentication_authorization_services_on_github/</guid><description>&lt;figure class="image-center">&lt;img src="https://user-images.githubusercontent.com/17719543/139592951-0fafc921-437e-4bb7-b0ee-199dd72b36c3.png">
&lt;/figure>

&lt;p>To successful bypass access control using path traversal in &lt;code>$request_uri&lt;/code>, you need to have buggy authentication/authorization service. Buggy in a way it&amp;rsquo;s not normalizing url/uri that is part of access control decision. Let me find more of those on github that are relying on &lt;code>X-Original-Url&lt;/code>. There is high chance that this header is populated from &lt;code>$request_uri&lt;/code> variable and not protected in any way.&lt;/p>
&lt;h2 id="pomerium">pomerium&lt;/h2>
&lt;blockquote>
&lt;p>Pomerium is an identity-aware proxy that enables secure access to internal applications.&lt;/p></description></item><item><title>Bug bounty tips for nginx $request_uri path traversal bypass</title><link>https://xvnpw.github.io/posts/bug_bounty_tips_for_nginx_request_uri_path_traversal_bypass/</link><pubDate>Sat, 27 Nov 2021 22:59:05 +0100</pubDate><guid>https://xvnpw.github.io/posts/bug_bounty_tips_for_nginx_request_uri_path_traversal_bypass/</guid><description>&lt;figure class="image-center">&lt;img src="https://user-images.githubusercontent.com/17719543/139592951-0fafc921-437e-4bb7-b0ee-199dd72b36c3.png">
&lt;/figure>

&lt;p>In this article, I will extend topic by bug bounty tips for weaknesses in authentication/authorization implementation in relation to nginx&amp;rsquo;s &lt;code>$request_uri&lt;/code> variable.&lt;/p>
&lt;h2 id="apis">APIs&lt;/h2>
&lt;p>This vulnerability is for APIs. Best scenario are &lt;strong>microservice&lt;/strong> deployed to Kubernetes and exposed by ingress controller.&lt;/p>
&lt;h2 id="using-paths">Using paths&lt;/h2>
&lt;p>API that you are playing with, need to use paths to address services, e.g.:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>OK!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>https://api.example.com/user-service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>https://api.example.com/customer-service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>NOT OK!
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>https://user.example.com/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>https://customer.example.com/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>First set of URLs is good for exploitation, as you can try sending request with &lt;code>https://api.example.com/user-service/..%2F/customer-service/endpoint1&lt;/code>&lt;/p></description></item><item><title>Path traversal in authorization context in Kong and F5 NGINX</title><link>https://xvnpw.github.io/posts/path_traversal_in_authorization_context_in_kong_and_f5_nginx/</link><pubDate>Thu, 25 Nov 2021 20:49:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/path_traversal_in_authorization_context_in_kong_and_f5_nginx/</guid><description>&lt;figure class="image-center">&lt;img src="https://user-images.githubusercontent.com/17719543/139592951-0fafc921-437e-4bb7-b0ee-199dd72b36c3.png">
&lt;/figure>

&lt;p>In this part I will research another ingress controller based on &lt;strong>nginx&lt;/strong>: 🦍 &lt;a href="https://konghq.com/solutions/kubernetes-ingress/">kong&lt;/a>. At the end of article I will mention in short &lt;a href="https://www.nginx.com/products/nginx-ingress-controller">F5 NGINX Ingress Controller&lt;/a>.&lt;/p>
&lt;p>In kong there is no explicit feature called external authentication, but developers gave possibility to create it using plugins.&lt;/p>
&lt;p>Here are some links describing this process:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://konghq.com/blog/custom-authentication-and-authorization-framework-with-kong/">Custom Authentication and Authorization Framework with Kong&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/aunkenlabs/kong-external-auth">aunkenlabs/kong-external-auth&lt;/a> - repository with PoC of external-auth. It&amp;rsquo;s old and cannot be run as it with kong 2.6, which is latest at time of writing.&lt;/li>
&lt;/ul>
&lt;p>During analysis I have found two possible exploitation paths:&lt;/p></description></item><item><title>Path traversal in authorization context in Emissary</title><link>https://xvnpw.github.io/posts/path_traversal_in_authorization_context_in_emissary/</link><pubDate>Wed, 24 Nov 2021 19:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/path_traversal_in_authorization_context_in_emissary/</guid><description>&lt;figure class="image-center">&lt;img src="https://user-images.githubusercontent.com/17719543/139592951-0fafc921-437e-4bb7-b0ee-199dd72b36c3.png">
&lt;/figure>

&lt;p>After checking Apache APISIX and Traefik, for path traversal in authZ context, now I will research Emissary ingress.&lt;/p>
&lt;p>In Emissary there is feature called &lt;a href="https://www.getambassador.io/docs/emissary/latest/howtos/basic-auth/">Basic authentication&lt;/a>, which is very similar to forward authentication discussed in Traefik.&lt;/p>
&lt;blockquote>
&lt;p>Emissary-ingress can authenticate incoming requests before routing them to a backing service.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>I can already tell you that Emissary is secure and you cannot bypass using path traversal&lt;/strong>. What is even better, it&amp;rsquo;s (and envoy) aware of this kind of security concern. There is full description in documentation. I encourage you to read it:&lt;/p></description></item><item><title>Path traversal in authorization context in Traefik and HAProxy</title><link>https://xvnpw.github.io/posts/path_traversal_in_authorization_context_in_traefik_and_haproxy/</link><pubDate>Tue, 23 Nov 2021 22:38:58 +0100</pubDate><guid>https://xvnpw.github.io/posts/path_traversal_in_authorization_context_in_traefik_and_haproxy/</guid><description>&lt;figure class="image-center">&lt;img src="https://user-images.githubusercontent.com/17719543/139592951-0fafc921-437e-4bb7-b0ee-199dd72b36c3.png">
&lt;/figure>

&lt;p>In my previous post about &lt;a href="https://xvnpw.github.io/posts/cve_2021_43557_apache_apisix_path_traversal_in_request_uri_variable/">Apache APISIX&lt;/a> I have found path traversal in uri-blocker plugin. In this text I will focus on yet another ingress controller which is &lt;a href="https://doc.traefik.io/traefik/providers/kubernetes-ingress/">Traefik&lt;/a>. It has feature called forward auth. At the end I will mention HAProxy ingress controller.&lt;/p>
&lt;p>From &lt;a href="https://doc.traefik.io/traefik/v2.0/middlewares/forwardauth/">docs&lt;/a>:&lt;/p>
&lt;blockquote>
&lt;p>The ForwardAuth middleware delegate the authentication to an external service. If the service response code is 2XX, access is granted and the original request is performed. Otherwise, the response from the authentication server is returned.&lt;/p></description></item><item><title>CVE-2021-43557: Apache APISIX: Path traversal in request_uri variable</title><link>https://xvnpw.github.io/posts/cve_2021_43557_apache_apisix_path_traversal_in_request_uri_variable/</link><pubDate>Mon, 22 Nov 2021 20:59:02 +0100</pubDate><guid>https://xvnpw.github.io/posts/cve_2021_43557_apache_apisix_path_traversal_in_request_uri_variable/</guid><description>&lt;figure class="image-center">&lt;img src="https://user-images.githubusercontent.com/17719543/139592951-0fafc921-437e-4bb7-b0ee-199dd72b36c3.png">
&lt;/figure>

&lt;p>In this article I will present my research on insecure usage of &lt;code>$request_uri&lt;/code> variable in &lt;a href="https://github.com/apache/apisix-ingress-controller/">Apache APISIX&lt;/a> ingress controller. My work end up in submit of security vulnerability, which was positively confirmed and got CVE-2021-43557. At the end of article I will mention in short &lt;a href="https://github.com/zalando/skipper">Skipper&lt;/a> which I tested for same problem.&lt;/p>
&lt;p>What is APISIX ? From official website:&lt;/p>
&lt;blockquote>
&lt;p>Apache APISIX is a dynamic, real-time, high-performance API gateway.
APISIX provides rich traffic management features such as load balancing, dynamic upstream, canary release, circuit breaking, authentication, observability, and more.&lt;/p></description></item><item><title>About</title><link>https://xvnpw.github.io/about/</link><pubDate>Sun, 31 Oct 2021 11:06:33 +0100</pubDate><guid>https://xvnpw.github.io/about/</guid><description>&lt;p>Hi. I&amp;rsquo;m security researcher, bug bounty hunter and appsec engineer.&lt;/p>
&lt;p>You can contact me via &lt;a href="https://www.linkedin.com/in/marcin-niemiec-304349104/">Linkedin&lt;/a> or &lt;a href="https://twitter.com/xvnpw">X/Twitter&lt;/a>.&lt;/p>
&lt;figure>&lt;img src="https://user-images.githubusercontent.com/17719543/142780058-1ede8ab3-567f-471f-b802-788efca3684f.png" width="200px">
&lt;/figure></description></item><item><title>Azure subscription security review</title><link>https://xvnpw.github.io/posts/azure-subscription-security-review/</link><pubDate>Mon, 01 Feb 2021 10:14:47 +0100</pubDate><guid>https://xvnpw.github.io/posts/azure-subscription-security-review/</guid><description>&lt;p>{{ template &amp;ldquo;_internal/google_analytics.html&amp;rdquo; . }}&lt;/p>
&lt;p>Lately I have come across task to perform security review of Azure subscription. It was white-box based and I had access to all terraform, Kubernetes and Docker files. I will share with you what checks are worth to do for such review.&lt;/p>
&lt;figure class="center">&lt;img src="https://user-images.githubusercontent.com/17719543/139584399-d5004590-c179-4a87-8c21-aa364f53e293.png">
&lt;/figure>

&lt;h2 id="my-methodology">My methodology&lt;/h2>
&lt;p>Number of resources to check may vary from project to project. For me best approach is to mix automated tools with manual work. If it&amp;rsquo;s possible I&amp;rsquo;m using two tools for same purpose. It makes my life easier as I don&amp;rsquo;t need to choose best tool 🙂 It&amp;rsquo;s also improving results.&lt;/p></description></item><item><title>Hacking SpEL</title><link>https://xvnpw.github.io/posts/hacking-spel/</link><pubDate>Fri, 17 Jul 2020 10:14:47 +0100</pubDate><guid>https://xvnpw.github.io/posts/hacking-spel/</guid><description>&lt;p>This story will explain how to find and exploit SpEL parser in web applications based on Java language.&lt;/p>
&lt;p>What is SpEL ? From Spring documentation:&lt;/p>
&lt;blockquote>
&lt;p>The Spring Expression Language (SpEL for short) is a powerful expression language that supports querying and manipulating an object graph at runtime.&lt;/p>
&lt;/blockquote>
&lt;p>Where is it used ?&lt;/p>
&lt;ol>
&lt;li>Spring Framework: Security, Data, …&lt;/li>
&lt;li>&lt;strong>Any place developers use it by SpEL API&lt;/strong>&lt;/li>
&lt;li>For languages it can be used in Java, Kotlin, Scala, and other JVM based technologies.&lt;/li>
&lt;/ol>
&lt;p>First point is known by issues in past like: &lt;a href="https://tanzu.vmware.com/security/cve-2018-1273">CVE-2018–1273&lt;/a>, &lt;a href="https://tanzu.vmware.com/security/cve-2017-8046">CVE-2017–8046&lt;/a> or CVE-2011–2730. I will not talk about them, I will focus on point number two.&lt;/p></description></item><item><title>From . in regex to SSRF - part 3</title><link>https://xvnpw.github.io/posts/from-dot-in-regex-to-ssrf-part-3/</link><pubDate>Tue, 07 Jul 2020 10:14:47 +0100</pubDate><guid>https://xvnpw.github.io/posts/from-dot-in-regex-to-ssrf-part-3/</guid><description>&lt;p>This is last part of my stories about exploiting service with SSRF bug. Part 1 is available &lt;a href="https://xvnpw.github.io/posts/from-dot-in-regex-to-ssrf-part-1/">here&lt;/a>, and part 2 &lt;a href="https://xvnpw.github.io/posts/from-dot-in-regex-to-ssrf-part-2/">here&lt;/a>.&lt;/p>
&lt;p>This part is focused on abusing Node.js and &lt;em>node-fetch&lt;/em> library. I will try to &amp;ldquo;talk&amp;rdquo; with Redis service using CRLF injection in http parser.&lt;/p>
&lt;p>For convenience Redis service will be simulated by &lt;code>nc -vvlp 6379&lt;/code>.&lt;/p>
&lt;p>Test environment from my Kali 2020.1b:&lt;/p>
&lt;ul>
&lt;li>Node.js version 10.19.0&lt;/li>
&lt;li>node-fetch version 2.6.0&lt;/li>
&lt;/ul>
&lt;h2 id="crlf-injection">CRLF Injection&lt;/h2>
&lt;p>Lets start with PayloadsAllTheThings. It contains couple of CRLF Injection payloads. I will loop over them and check result in second console:&lt;/p></description></item><item><title>From . in regex to SSRF - part 2</title><link>https://xvnpw.github.io/posts/from-dot-in-regex-to-ssrf-part-2/</link><pubDate>Tue, 14 Jan 2020 10:14:47 +0100</pubDate><guid>https://xvnpw.github.io/posts/from-dot-in-regex-to-ssrf-part-2/</guid><description>&lt;p>In this story I will continue my journey to exploit Server Side Request Forgery (SSRF). Part 1 is available &lt;a href="https://xvnpw.github.io/posts/from-dot-in-regex-to-ssrf-part-1/">here&lt;/a>.&lt;/p>
&lt;p>What is state of the game up to now? I have found service that is vulnerable to SSRF by executing the REST call and by passing domain name check:&lt;/p>
&lt;p>&lt;code>https://api.example.org/image-converter/https://www-example.org&lt;/code>&lt;/p>
&lt;p>I have registered domain name: &lt;code>www-example.org&lt;/code> and add for it &lt;code>CNAME&lt;/code> record to my EC2 server.&lt;/p>
&lt;p>But wait a second. &lt;strong>This is not yet &amp;ldquo;SSRF&amp;rdquo;&lt;/strong>. For now I could call specific domain, but didn&amp;rsquo;t prove ability to scan internal ports or execute requests to internal services.&lt;/p></description></item><item><title>From . in regex to SSRF - part 1</title><link>https://xvnpw.github.io/posts/from-dot-in-regex-to-ssrf-part-1/</link><pubDate>Sun, 05 Jan 2020 10:14:47 +0100</pubDate><guid>https://xvnpw.github.io/posts/from-dot-in-regex-to-ssrf-part-1/</guid><description>&lt;figure class="image-center">&lt;img src="https://user-images.githubusercontent.com/17719543/139576912-865d0f16-6dc3-4af9-8a39-5e77d7b236c3.png">
&lt;/figure>

&lt;p>In test of one application I have encountered bug in regex that leaded to Server Side Request Forgery (SSRF). Way of finding it was huge fun and excitement. It was also my first bug on production system ever.&lt;/p>
&lt;p>During a recon I have found service called &lt;em>image-converter&lt;/em>. It was definitely interesting, but not straight forward to exploit. I had no example of usage it and on simple GET request I was just getting:&lt;/p></description></item></channel></rss>